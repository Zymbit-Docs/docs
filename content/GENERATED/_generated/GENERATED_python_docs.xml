<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/builds/zymbit/zkapputilslib/docs/python/index.rst">
    <section ids="module-zymkey python-api-documentation" names="python\ api\ documentation">
        <title>Python API Documentation</title>
        <index entries="['pair',\ 'module;\ zymkey',\ 'module-zymkey',\ '',\ None]"></index>
        <paragraph>Python interface module to Zymkey Application Utilities Library.</paragraph>
        <paragraph>This file contains a Python class which interfaces to the the Zymkey
            Application Utilities library. This class facilitates writing user
            space applications which use Zymkey to perform cryptographic
            operations, such as:</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph>Signing of payloads using ECDSA</paragraph>
            </list_item>
            <list_item>
                <paragraph>Verification of payloads that were signed using Zymkey</paragraph>
            </list_item>
            <list_item>
                <paragraph>Exporting the public key that matches Zymkey’s private key</paragraph>
            </list_item>
            <list_item>
                <paragraph>“Locking” and “unlocking” data objects</paragraph>
            </list_item>
            <list_item>
                <paragraph>Generating random data</paragraph>
            </list_item>
        </enumerated_list>
        <paragraph>Additionally, there are methods for changing the i2c address (i2c units
            only), setting tap sensitivity, and controlling the LED. You can also
            retrieve information such as the Model, Serial Number, and Firmware Version.</paragraph>
        <index entries="['single',\ 'Zymkey\ (class\ in\ zymkey)',\ 'zymkey.Zymkey',\ '',\ None]"></index>
        <desc classes="py" desctype="class" domain="py" noindex="False" objtype="class">
            <desc_signature class="" fullname="Zymkey" ids="zymkey.Zymkey" module="zymkey"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">zymkey.</desc_addname><desc_name xml:space="preserve">Zymkey</desc_name></desc_signature>
            <desc_content>
                <paragraph>The Zymkey class definition.</paragraph>
                <paragraph>This class provides access to the Zymkey within Python.</paragraph>
                <index entries="['single',\ 'EPHEMERAL_KEY_SLOT\ (zymkey.Zymkey\ attribute)',\ 'zymkey.Zymkey.EPHEMERAL_KEY_SLOT',\ '',\ None]"></index>
                <desc classes="py" desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Zymkey" fullname="Zymkey.EPHEMERAL_KEY_SLOT" ids="zymkey.Zymkey.EPHEMERAL_KEY_SLOT" module="zymkey"><desc_name xml:space="preserve">EPHEMERAL_KEY_SLOT</desc_name><desc_annotation xml:space="preserve"> = -1</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ '__init__()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.__init__',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.__init__" ids="zymkey.Zymkey.__init__" module="zymkey"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>The class initialization opens and stores an instance of a Zymkey context.</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ '__del__()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.__del__',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.__del__" ids="zymkey.Zymkey.__del__" module="zymkey"><desc_name xml:space="preserve">__del__</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'led_on()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.led_on',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.led_on" ids="zymkey.Zymkey.led_on" module="zymkey"><desc_name xml:space="preserve">led_on</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Turn the LED on.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                        <rubric>Example</rubric>
                        <paragraph>import zymkey
                            zymkey.client.led_on()</paragraph>
                        <field_list>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-obj">None</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'hello_world()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.hello_world',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.hello_world" ids="zymkey.Zymkey.hello_world" module="zymkey"><desc_name xml:space="preserve">hello_world</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Print hello world</paragraph>
                        <field_list>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-obj">None</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'led_off()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.led_off',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.led_off" ids="zymkey.Zymkey.led_off" module="zymkey"><desc_name xml:space="preserve">led_off</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Turn the LED off.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-obj">None</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'led_flash()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.led_flash',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.led_flash" ids="zymkey.Zymkey.led_flash" module="zymkey"><desc_name xml:space="preserve">led_flash</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">on_ms</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">off_ms</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">0</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">num_flashes</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">0</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Flash the LED.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">on_ms</literal_strong> (<literal classes="xref py py-class">int</literal>) – The amount of time in milliseconds that the LED will be on for.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">off_ms</literal_strong> (<literal classes="xref py py-class">int</literal>) – The amount of time in milliseconds that the LED will be off for. If
                                                this parameter is set to 0 (default), the off time is the same as
                                                the on time.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">num_flashes</literal_strong> (<literal classes="xref py py-class">int</literal>) – The number of on/off cycles to execute. If this parameter is set
                                                to 0 (default), the LED flashes indefinitely.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-obj">None</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_random()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_random',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_random" ids="zymkey.Zymkey.get_random" module="zymkey"><desc_name xml:space="preserve">get_random</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">num_bytes</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get some random bytes.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">num_bytes</literal_strong> (<literal classes="xref py py-class">int</literal>) – The number of random bytes to get.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>An array of bytes returned by the random number generator.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bytearray</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_random_file()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.create_random_file',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.create_random_file" ids="zymkey.Zymkey.create_random_file" module="zymkey"><desc_name xml:space="preserve">create_random_file</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">file_path</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">num_bytes</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Deposit random data in a file.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">file_path</literal_strong> (<literal classes="xref py py-class">str</literal>) – The absolute path name for the destination file.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">num_bytes</literal_strong> (<literal classes="xref py py-class">int</literal>) – The number of random bytes to get.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-obj">None</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'lock()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.lock',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.lock" ids="zymkey.Zymkey.lock" module="zymkey"><desc_name xml:space="preserve">lock</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">src</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">dst</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">encryption_key</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">'zymkey'</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Lock up source (plaintext) data.</paragraph>
                        <paragraph>This methods encrupts and signs a block of data.</paragraph>
                        <paragraph>The Zymkey has two keys that can be used for locking/unlocking operations,
                            designated as ‘shared’ and ‘one-way’:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>The one-way key is meant to lock up data only on the local host
                                    computer. Data encrypted using this key cannot be exported and
                                    deciphered anywhere else.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>The shared key is meant for publishing data to other sources that
                                    have the capability to generate the shared key, such as the Zymbit
                                    cloud server.</paragraph>
                            </list_item>
                        </enumerated_list>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">src</literal_strong> (<literal classes="xref py py-data">Union</literal>[<literal classes="xref py py-class">str</literal>, <literal classes="xref py py-class">bytes</literal>]) – <paragraph>The source (plaintext) data to lock.</paragraph><paragraph>If a <title_reference>str</title_reference> is passed to this method, the value is assumed to be
                                                    the absolute path to the location of the source file. If <title_reference>bytes</title_reference>
                                                    or <title_reference>bytesarray</title_reference> is passed, it is assumed to contain binary data.</paragraph></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">dst</literal_strong> (<literal classes="xref py py-data">Optional</literal>[<literal classes="xref py py-class">str</literal>]) – <paragraph>The destination (ciphertext) of the locked data.</paragraph><paragraph>If a <title_reference>str</title_reference> is passed to this method, the value is assumed to be
                                                    the absolute path to the location of the file where the destination
                                                    data is meant to be written. Otherwise, if <title_reference>None</title_reference> is passed to the
                                                    method (the default), the locked data is returned from the method
                                                    as a bytearray.</paragraph></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">encryption_key</literal_strong> (<literal classes="xref py py-class">str</literal>) – This specifies which key will be used to lock the data. A value of
                                                ‘zymbit’ (default) specifies that the Zymkey will use the one-way
                                                key. A value of ‘cloud’ specifies that the shared key is used.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The locked data is returned as a bytearray if no destination is
                                        specified when this method is called. Otherwise, <title_reference>None</title_reference> is returned.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bytearray or None</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'unlock()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.unlock',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.unlock" ids="zymkey.Zymkey.unlock" module="zymkey"><desc_name xml:space="preserve">unlock</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">src</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">dst</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">encryption_key</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">'zymkey'</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">raise_exception</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">True</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Unlock source (ciphertext) data.</paragraph>
                        <paragraph>This method verifies a locked object signature and decrypts the
                            associated ciphertext data.</paragraph>
                        <paragraph>The Zymkey has two keys that can be used for locking/unlocking operations,
                            designated as ‘shared’ and ‘one-way’:</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>The one-way key is meant to lock up data only on the local host
                                    computer. Data encrypted using this key cannot be exported and
                                    deciphered anywhere else.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>The shared key is meant for publishing data to other sources that
                                    have the capability to generate the shared key, such as the Zymbit
                                    cloud server.</paragraph>
                            </list_item>
                        </enumerated_list>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">src</literal_strong> (<literal classes="xref py py-data">Union</literal>[<literal classes="xref py py-class">str</literal>, <literal classes="xref py py-class">bytes</literal>]) – <paragraph>The source (ciphertext) data to verify and decrypt.</paragraph><paragraph>If a <title_reference>str</title_reference> is passed to this method, the value is assumed to be
                                                    the absolute path to the location of the source file. If <title_reference>bytes</title_reference>
                                                    or <title_reference>bytesarray</title_reference> is passed, it is assumed to contain binary data.</paragraph></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">dst</literal_strong> (<literal classes="xref py py-data">Optional</literal>[<literal classes="xref py py-class">str</literal>]) – <paragraph>The destination of the decrypted data (plaintext).</paragraph><paragraph>If a <title_reference>str</title_reference> is passed to this method, the value is assumed to be
                                                    the absolute path to the location of the file where the destination
                                                    data is meant to be written. Otherwise, if <title_reference>None</title_reference> is passed to the
                                                    method (the default), the locked data is returned from the method
                                                    as a bytearray.</paragraph></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">encryption_key</literal_strong> (<literal classes="xref py py-class">str</literal>) – This specifies which key will be used to lock the data. A value of
                                                ‘zymbit’ (default) specifies that the Zymkey will use the one-way
                                                key. A value of ‘cloud’ specifies that the shared key is used.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">raise_exception</literal_strong> (<literal classes="xref py py-class">bool</literal>) – Specifies if an exception should be raised if the signature verification
                                                of the locked object fails.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The locked data is returned as a bytearray if no destination is
                                        specified when this method is called. Otherwise, <title_reference>None</title_reference> is returned.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bytearray or None</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'sign()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.sign',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.sign" ids="zymkey.Zymkey.sign" module="zymkey"><desc_name xml:space="preserve">sign</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">src</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">slot</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">0</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Generate a signature using the Zymkey’s ECDSA private key.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">src</literal_strong> (<literal classes="xref py py-class">str</literal>) – The SHA256 digest of the data that will be used to generate the signature.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">slot</literal_strong> (<literal classes="xref py py-class">int</literal>) – The key slot used for signing.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>A bytearray of the signature.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bytearray</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'sign_digest()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.sign_digest',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.sign_digest" ids="zymkey.Zymkey.sign_digest" module="zymkey"><desc_name xml:space="preserve">sign_digest</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">sha256</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">slot</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">0</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Generate a signature using the Zymkey’s ECDSA private key.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">sha256</literal_strong> (<literal_emphasis>_hashlib.HASH</literal_emphasis>) – A hashlib.sha256 instance representing the digest to be signed.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">slot</literal_strong> (<literal_emphasis>int</literal_emphasis>) – This parameter specifies the key slot used for signing.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The signature of the SHA-256 digest passed to this method.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bytearray</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'verify()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.verify',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.verify" ids="zymkey.Zymkey.verify" module="zymkey"><desc_name xml:space="preserve">verify</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">src</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">sig</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">raise_exception</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">True</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">pubkey_slot</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">0</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">foreign</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Verify data against a signature.</paragraph>
                        <paragraph>The public key is not specified in the parameter list to ensure
                            that the public key that matches the Zymkey’s ECDSA private key
                            is used.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">src</literal_strong> (<literal_emphasis>TYPE</literal_emphasis>) – The buffer to verify.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">sig</literal_strong> (<literal_emphasis>TYPE</literal_emphasis>) – The signature to verify against.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">raise_exception</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – By default, when verification fails a <title_reference>VerificationError</title_reference> will be
                                                raised, unless this is set to <title_reference>False</title_reference>.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">pubkey_slot</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The key slot to use to verify the signature against. Defaults to the
                                                first key slot.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">foreign</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – If false, the normal key store is referenced. Otherwise, the foreign
                                                public key store is referenced.
                                                <strong>Note:</strong> This parameter is only applicable for model &gt;= HSM6.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Returns <title_reference>True</title_reference> for a good verification or <title_reference>False</title_reference> for a bad
                                        verification when the <title_reference>raise_exception</title_reference> parameters is <title_reference>False</title_reference>.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'verify_digest()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.verify_digest',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.verify_digest" ids="zymkey.Zymkey.verify_digest" module="zymkey"><desc_name xml:space="preserve">verify_digest</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">sha256</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">sig</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">raise_exception</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">True</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">pubkey_slot</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">0</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">foreign</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Verify a signature using the Zymkey’s ECDSA public key.</paragraph>
                        <paragraph>The public key is not specified in the parameter list to ensure
                            that the public key that matches the Zymkey’s ECDSA private key
                            is used.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">sha256</literal_strong> (<literal_emphasis>TYPE</literal_emphasis>) – A hashlib.sha256 instance that will be used to generate the signature.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">sig</literal_strong> (<literal_emphasis>TYPE</literal_emphasis>) – The signature to verify.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">raise_exception</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – By default, when verification fails, a <title_reference>VerificationError</title_reference> will be
                                                raised, unless this is set to <title_reference>False</title_reference>.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">pubkey_slot</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The key slot to use to verify the signature against. Defaults to
                                                the first key slot.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">foreign</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – If false, the normal key store is referenced. Otherwise, the foreign
                                                public key store is referenced.
                                                <strong>Note:</strong> This parameter is only applicable for model &gt;= HSM6.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>Returns <title_reference>True</title_reference> for a good verification or <title_reference>False</title_reference> for a bad
                                        verification when <title_reference>raise_exception</title_reference> is <title_reference>False</title_reference>.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bool</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'ecdh()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.ecdh',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.ecdh" ids="zymkey.Zymkey.ecdh" module="zymkey"><desc_name xml:space="preserve">ecdh</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">local_slot</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">peer_pubkey</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">kdf_func_type</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">'none'</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">salt</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">[]</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">info</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">[]</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">num_iterations</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">1</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">peer_pubkey_slot_is_foreign</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">True</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">derived_key_size</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">32</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Derive a key or a pre-master secret from an ECDH operation. (model &gt;= HSM6).</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">local_slot</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The local key slot to use.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">peer_pubkey</literal_strong> (<literal_emphasis>Union</literal_emphasis><literal_emphasis>[</literal_emphasis><literal_emphasis>List</literal_emphasis><literal_emphasis>[</literal_emphasis><literal_emphasis>bytes</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>, </literal_emphasis><literal_emphasis>int</literal_emphasis><literal_emphasis>]</literal_emphasis>) – The public key of the peer used to generate the pre-master secret
                                                against the private key located in <title_reference>local_slot</title_reference>. This parameter can
                                                be a list of <title_reference>bytes</title_reference> if the key is provided explicitly or an <title_reference>int</title_reference>
                                                if it refers to a key slot.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">kdf_func_type</literal_strong> (<literal_emphasis>str</literal_emphasis>) – <paragraph>Specifies the KDF (Key Derivation Function) to use
                                                    for the returned derived key. Valid values are:</paragraph><bullet_list bullet="*"><list_item><paragraph><title_reference>”none”</title_reference>: just return the pre-master secret. NOTE: The raw pre-master
                                                            secret should not be used as a derived key should be put through a
                                                            suitable KDF. Use ‘none’ when it is desired to use a different KDF
                                                            than what is offered by this method.</paragraph></list_item><list_item><paragraph><title_reference>”rfc5869-sha256”</title_reference>: RFC5869 with SHA256</paragraph></list_item><list_item><paragraph><title_reference>”rfc5869-sha512”</title_reference>: RFC5869 with SHA512</paragraph></list_item><list_item><paragraph><title_reference>”pbkdf2-sha256”</title_reference>: PBKDF2 with SHA256</paragraph></list_item><list_item><paragraph><title_reference>”pbkdf2-sha512”</title_reference>: PBKDF2 with SHA512</paragraph></list_item></bullet_list></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">salt</literal_strong> (<literal_emphasis>Optional</literal_emphasis><literal_emphasis>[</literal_emphasis><literal_emphasis>List</literal_emphasis><literal_emphasis>[</literal_emphasis><literal_emphasis>bytes</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>]</literal_emphasis>) – A unique identifier for KDF. Ignored for <title_reference>kdf_func_type=’none’</title_reference>.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">info</literal_strong> (<literal_emphasis>Optional</literal_emphasis><literal_emphasis>[</literal_emphasis><literal_emphasis>List</literal_emphasis><literal_emphasis>[</literal_emphasis><literal_emphasis>bytes</literal_emphasis><literal_emphasis>]</literal_emphasis><literal_emphasis>]</literal_emphasis>) – A unique field for rfc5869. Ignore for other KDF types.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">num_iterations</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The number of iterations that the KDF should complete.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">peer_pubkey_slot_is_foreign</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – TODO_DESCRIPTION</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">derived_key_size</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – TODO_DESCRIPTION</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The computed signature.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bytearray</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_ecdsa_public_key_file()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.create_ecdsa_public_key_file',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.create_ecdsa_public_key_file" ids="zymkey.Zymkey.create_ecdsa_public_key_file" module="zymkey"><desc_name xml:space="preserve">create_ecdsa_public_key_file</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">filename</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">slot</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">0</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create a file with the PEM-formatted ECDSA public key.</paragraph>
                        <paragraph><strong>[DEPRECATED]:</strong> Use <title_reference>create_public_key_file</title_reference> instead.</paragraph>
                        <paragraph>This method is useful for generating a Certificate Signing Request.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">filename</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The absolute file path where the public key will be stored in PEM format.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">slot</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The key slot for the public key.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-obj">None</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'create_public_key_file()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.create_public_key_file',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.create_public_key_file" ids="zymkey.Zymkey.create_public_key_file" module="zymkey"><desc_name xml:space="preserve">create_public_key_file</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">filename</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">slot</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">0</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">foreign</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Create a file with the PEM-formatted public key.</paragraph>
                        <paragraph>This method is useful for generating a Certificate Signing Request.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">filename</literal_strong> (<literal_emphasis>str</literal_emphasis>) – The absolute file path where the public key will be stored in PEM format.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">slot</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The key slot for the public key.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">foreign</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – If <title_reference>True</title_reference>, designates the pubkey slot to come from the foreign keystore (model &gt;= HSM6).</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-obj">None</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_ecdsa_public_key()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_ecdsa_public_key',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_ecdsa_public_key" ids="zymkey.Zymkey.get_ecdsa_public_key" module="zymkey"><desc_name xml:space="preserve">get_ecdsa_public_key</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">slot</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">0</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Retrieves the ECDSA public key as a binary bytearray.</paragraph>
                        <paragraph><strong>[DEPRECATED]:</strong> Use <title_reference>get_public_key</title_reference> instead.</paragraph>
                        <paragraph>This method is used to retrieve the public key in binary form.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">slot</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The key slot for the public key.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The public key in binary form.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bytearray</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_public_key()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_public_key',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_public_key" ids="zymkey.Zymkey.get_public_key" module="zymkey"><desc_name xml:space="preserve">get_public_key</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">slot</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">0</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">foreign</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Retrieves a public key as a binary bytearray.</paragraph>
                        <paragraph>This method is used to retrieve the public key in binary form.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">slot</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The key slot for the public key. Zymkey and HSM4 have slots 0, 1, and 2.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">foreign</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – If <title_reference>True</title_reference>, designates the pubkey slot to come from the foreign keystore (model &gt;= HSM6).</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The public key in binary form.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>bytearray</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_slot_alloc_list()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_slot_alloc_list',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_slot_alloc_list" ids="zymkey.Zymkey.get_slot_alloc_list" module="zymkey"><desc_name xml:space="preserve">get_slot_alloc_list</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">foreign</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get a list of the allocated slots in the key store (model &gt;= HSM6).</paragraph>
                        <paragraph>This method gets a list of the allocated slots in the key store.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">foreign</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – If <title_reference>True</title_reference>, designates the pubkey slot to come from the foreign keystore (model &gt;= HSM6).</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The allocation list and the maximum number of keys</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>Tuple[list, int]</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'store_foreign_public_key()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.store_foreign_public_key',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.store_foreign_public_key" ids="zymkey.Zymkey.store_foreign_public_key" module="zymkey"><desc_name xml:space="preserve">store_foreign_public_key</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">key_type</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">pubkey</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Stores a foreign public key on the Zymkey foreign keyring (model &gt;= HSM6).</paragraph>
                        <paragraph>This method stores a foreign public key onto the Zymkey foreign public keyring.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">key_type</literal_strong> (<literal_emphasis>TYPE</literal_emphasis>) – The EC curve type that should be associated with the public key.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">pubkey</literal_strong> (<literal_emphasis>TYPE</literal_emphasis>) – The public key binary data.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The slot allocated to the key, or less than one for failure.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'disable_public_key_export()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.disable_public_key_export',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.disable_public_key_export" ids="zymkey.Zymkey.disable_public_key_export" module="zymkey"><desc_name xml:space="preserve">disable_public_key_export</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">slot</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">0</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">foreign</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Disable exporting of a public key at a given slot (model &gt;= HSM6).</paragraph>
                        <paragraph>This method permanently disables exporting a public key from a
                            given slot.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">slot</literal_strong> – This parameter specifies the key slot for the public key.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">foreign</literal_strong> – If true, the slot refers to the foreign public keyring.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'gen_key_pair()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.gen_key_pair',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.gen_key_pair" ids="zymkey.Zymkey.gen_key_pair" module="zymkey"><desc_name xml:space="preserve">gen_key_pair</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">key_type</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Generate a new key pair (model &gt;= HSM6).</paragraph>
                        <paragraph>This method generates a new key pair of the specified type.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">key_type</literal_strong> – This parameter indicates the EC curve type that should be
                                        associated with the new key pair.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>the slot allocated to the key or less than one for failure.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'gen_ephemeral_key_pair()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.gen_ephemeral_key_pair',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.gen_ephemeral_key_pair" ids="zymkey.Zymkey.gen_ephemeral_key_pair" module="zymkey"><desc_name xml:space="preserve">gen_ephemeral_key_pair</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">key_type</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Generate a new ephemeral key pair (model &gt;= HSM6).</paragraph>
                        <paragraph>This method generates a new ephemeral key pair of the specified
                            type, overwriting the previous ephemeral key pair.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">key_type</literal_strong> – This parameter indicates the EC curve type that should be
                                        associated with the new key pair.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'remove_key()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.remove_key',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.remove_key" ids="zymkey.Zymkey.remove_key" module="zymkey"><desc_name xml:space="preserve">remove_key</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">slot</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">foreign</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Remove a key at the designated slot (model &gt;= HSM6).</paragraph>
                        <paragraph>This method removes a key at the designated slot in either the
                            standard key store or the foreign public keyring.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">slot</literal_strong> – This parameter specifies the key slot for the key.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">foreign</literal_strong> – If true, a public key in the foreign keyring will be deleted.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'invalidate_ephemeral_key()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.invalidate_ephemeral_key',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.invalidate_ephemeral_key" ids="zymkey.Zymkey.invalidate_ephemeral_key" module="zymkey"><desc_name xml:space="preserve">invalidate_ephemeral_key</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">slot</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">foreign</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Invalidate the ephemeral key (model &gt;= HSM6).</paragraph>
                        <paragraph>This method invalidates the ephemeral key, effectively removing
                            it from service until a new key is generated.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">slot</literal_strong> (<literal_emphasis>int</literal_emphasis>) – The key slot for the key.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">foreign</literal_strong> (<literal_emphasis>bool</literal_emphasis>) – If true, a public key in the foreign keyring will be deleted.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>TODO</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>int</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'gen_wallet_master_seed()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.gen_wallet_master_seed',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.gen_wallet_master_seed" ids="zymkey.Zymkey.gen_wallet_master_seed" module="zymkey"><desc_name xml:space="preserve">gen_wallet_master_seed</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">key_type</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">master_gen_key</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">wallet_name</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">bip39</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Generates a new master seed for creating a new BIP32 wallet (model &gt;= HSM6).</paragraph>
                        <paragraph>This method generates a new master seed for creating a new BIP32
                            wallet.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">key_type</literal_strong> – This parameter indicates the EC curve type that should be
                                                associated with the new key pair.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">master_gen_key</literal_strong> – The master generator key (bytearray) used in the
                                                derivation of the child key.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">wallet_name</literal_strong> – The name of the wallet (string) that this master seed
                                                is attached to.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">bip39</literal_strong> – If true, generate the seed per BIP39 and return the mnemonic
                                                string.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>a tuple with the slot and the BIP39 mnemonic if specified</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'gen_wallet_child_key()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.gen_wallet_child_key',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.gen_wallet_child_key" ids="zymkey.Zymkey.gen_wallet_child_key" module="zymkey"><desc_name xml:space="preserve">gen_wallet_child_key</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">parent_key_slot</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">index</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">hardened</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Generates a child key based on a parent key that is in a wallet (model &gt;= HSM6).</paragraph>
                        <paragraph>This method generates a child key based on a parent key that is
                            in a wallet.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">parent_key_slot</literal_strong> – This parameter specifies the parent key slot. This
                                                key must already be part of a wallet.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">index</literal_strong> – This parameter represents the index for the child key
                                                derivation which becomes part of the node address.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">hardened</literal_strong> – If true, the key is a hardened key.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>the allocated slot on success</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'restore_wallet_master_seed_from_bip39_mnemonic()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.restore_wallet_master_seed_from_bip39_mnemonic',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.restore_wallet_master_seed_from_bip39_mnemonic" ids="zymkey.Zymkey.restore_wallet_master_seed_from_bip39_mnemonic" module="zymkey"><desc_name xml:space="preserve">restore_wallet_master_seed_from_bip39_mnemonic</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">key_type</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">master_gen_key</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">wallet_name</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">bip39_mnemonic</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Restore a wallet’s master seed based on a BIP39 mnemonic string (model &gt;= HSM6).</paragraph>
                        <paragraph>This method restores a wallet’s master seed based on a BIP39
                            mnemonic string and a master generator key. This method can be
                            used in the process of wallet duplication.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">key_type</literal_strong> – This parameter indicates the EC curve type that should be
                                                associated with the new key pair.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">master_gen_key</literal_strong> – The master generator key used in the derivation of
                                                the child key.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">bip39_mnemonic</literal_strong> – The BIP39 mnemonic string.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>the allocated slot on success</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_wallet_node_addr()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_wallet_node_addr',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_wallet_node_addr" ids="zymkey.Zymkey.get_wallet_node_addr" module="zymkey"><desc_name xml:space="preserve">get_wallet_node_addr</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">slot</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get a wallet node address from a key slot (model &gt;= HSM6)</paragraph>
                        <paragraph>This method gets a wallet entry’s node address from its key slot
                            assignment. The wallet name and master seed slot are also
                            returned.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">slot</literal_strong> – The key slot assignment.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>the node address, wallet name and master seed key slot.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_wallet_key_slot()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_wallet_key_slot',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_wallet_key_slot" ids="zymkey.Zymkey.get_wallet_key_slot" module="zymkey"><desc_name xml:space="preserve">get_wallet_key_slot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">node_addr</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">wallet_name</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">master_seed_slot</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">None</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Look up a wallet key slot number from a node address (model &gt;= HSM6)</paragraph>
                        <paragraph>This method gets a wallet key slot number from its node address
                            and wallet name or master seed key slot. Either the wallet name
                            or the master seed slot must be present.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">node_addr</literal_strong> – The desired node address to look up</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">wallet_name</literal_strong> – The name of the wallet that the node address belongs
                                                to. Either this parameter or master_seed_slot must be
                                                specified or this function will fail.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">master_seed_slot</literal_strong> – The master seed slot that the node address belongs
                                                to. Either this parameter or wallet_name must be
                                                specified or this function will fail.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>the key slot.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_i2c_address()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.set_i2c_address',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.set_i2c_address" ids="zymkey.Zymkey.set_i2c_address" module="zymkey"><desc_name xml:space="preserve">set_i2c_address</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">address</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set the i2c address of the Zymkey.</paragraph>
                        <paragraph><strong>Note:</strong> This is only applicable to versions of the Zymkey with i2c.</paragraph>
                        <paragraph>This method should be called if the i2c address of the
                            Zymkey is shared with another i2c device on the same i2c bus.
                            The default i2c address for Zymkey units is 0x30. Currently,
                            the address may be set in the ranges of 0x30 - 0x37 and 0x60 - 0x67.</paragraph>
                        <paragraph>After successful completion of this command, the Zymkey will
                            reboot itself.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">address</literal_strong> (<literal classes="xref py py-class">int</literal>) – The i2c address that the Zymkey will set itself to.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph><literal classes="xref py py-obj">None</literal></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_tap_sensitivity()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.set_tap_sensitivity',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.set_tap_sensitivity" ids="zymkey.Zymkey.set_tap_sensitivity" module="zymkey"><desc_name xml:space="preserve">set_tap_sensitivity</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">axis</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">'all'</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">pct</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">50.0</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set the sensitivity of tap operations.</paragraph>
                        <paragraph>This method permits setting the sensitivity of the tap
                            detection feature. Each axis may be individually
                            configured or all at once.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">axis</literal_strong> – <definition_list><definition_list_item><term>The axis to configure. Valid values include:</term><definition><enumerated_list enumtype="arabic" prefix="" suffix="."><list_item><paragraph>’all’: Configure all axes with the specified sensitivity value.</paragraph></list_item><list_item><paragraph>’x’ or ‘X’: Configure only the x-axis</paragraph></list_item><list_item><paragraph>’y’ or ‘Y’: Configure only the y-axis</paragraph></list_item><list_item><paragraph>’z’ or ‘Z’: Configure only the z-axis</paragraph></list_item></enumerated_list></definition></definition_list_item></definition_list></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">pct</literal_strong> – <definition_list><definition_list_item><term>The sensitivity expressed as percentage.</term><definition><enumerated_list enumtype="arabic" prefix="" suffix="."><list_item><paragraph>0% = Shut down: Tap detection should not occur along the axis.</paragraph></list_item><list_item><paragraph>100% = Maximum sensitivity.</paragraph></list_item></enumerated_list></definition></definition_list_item></definition_list></paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'wait_for_tap()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.wait_for_tap',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.wait_for_tap" ids="zymkey.Zymkey.wait_for_tap" module="zymkey"><desc_name xml:space="preserve">wait_for_tap</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">timeout_ms</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">- 1</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Wait for tap event</paragraph>
                        <paragraph>This function is called in order to wait for a tap event to occur.
                            This function blocks the calling thread unless called with a
                            timeout of zero.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">timeout_ms</literal_strong> – The maximum amount of time in milliseconds to wait for a tap
                                        event to arrive.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'Zymkey.ZymkeyAccelAxisData\ (class\ in\ zymkey)',\ 'zymkey.Zymkey.ZymkeyAccelAxisData',\ '',\ None]"></index>
                <desc classes="py" desctype="class" domain="py" noindex="False" objtype="class">
                    <desc_signature class="Zymkey" fullname="Zymkey.ZymkeyAccelAxisData" ids="zymkey.Zymkey.ZymkeyAccelAxisData" module="zymkey"><desc_annotation xml:space="preserve">class </desc_annotation><desc_name xml:space="preserve">ZymkeyAccelAxisData</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">g_force</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">tap_dir</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <index entries="['single',\ '__init__()\ (zymkey.Zymkey.ZymkeyAccelAxisData\ method)',\ 'zymkey.Zymkey.ZymkeyAccelAxisData.__init__',\ '',\ None]"></index>
                        <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                            <desc_signature class="Zymkey.ZymkeyAccelAxisData" fullname="Zymkey.ZymkeyAccelAxisData.__init__" ids="zymkey.Zymkey.ZymkeyAccelAxisData.__init__" module="zymkey"><desc_name xml:space="preserve">__init__</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">g_force</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">tap_dir</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                            <desc_content>
                                <paragraph>Initialize self.  See help(type(self)) for accurate signature.</paragraph>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ '__dict__\ (zymkey.Zymkey.ZymkeyAccelAxisData\ attribute)',\ 'zymkey.Zymkey.ZymkeyAccelAxisData.__dict__',\ '',\ None]"></index>
                        <desc classes="py" desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="Zymkey.ZymkeyAccelAxisData" fullname="Zymkey.ZymkeyAccelAxisData.__dict__" ids="zymkey.Zymkey.ZymkeyAccelAxisData.__dict__" module="zymkey"><desc_name xml:space="preserve">__dict__</desc_name><desc_annotation xml:space="preserve"> = mappingproxy({'__module__': 'zymkey', '__init__': &lt;function Zymkey.ZymkeyAccelAxisData.__init__&gt;, '__dict__': &lt;attribute '__dict__' of 'ZymkeyAccelAxisData' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'ZymkeyAccelAxisData' objects&gt;, '__doc__': None, '__annotations__': {}})</desc_annotation></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ '__module__\ (zymkey.Zymkey.ZymkeyAccelAxisData\ attribute)',\ 'zymkey.Zymkey.ZymkeyAccelAxisData.__module__',\ '',\ None]"></index>
                        <desc classes="py" desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="Zymkey.ZymkeyAccelAxisData" fullname="Zymkey.ZymkeyAccelAxisData.__module__" ids="zymkey.Zymkey.ZymkeyAccelAxisData.__module__" module="zymkey"><desc_name xml:space="preserve">__module__</desc_name><desc_annotation xml:space="preserve"> = 'zymkey'</desc_annotation></desc_signature>
                            <desc_content>
                            </desc_content>
                        </desc>
                        <index entries="['single',\ '__weakref__\ (zymkey.Zymkey.ZymkeyAccelAxisData\ attribute)',\ 'zymkey.Zymkey.ZymkeyAccelAxisData.__weakref__',\ '',\ None]"></index>
                        <desc classes="py" desctype="attribute" domain="py" noindex="False" objtype="attribute">
                            <desc_signature class="Zymkey.ZymkeyAccelAxisData" fullname="Zymkey.ZymkeyAccelAxisData.__weakref__" ids="zymkey.Zymkey.ZymkeyAccelAxisData.__weakref__" module="zymkey"><desc_name xml:space="preserve">__weakref__</desc_name></desc_signature>
                            <desc_content>
                                <paragraph>list of weak references to the object (if defined)</paragraph>
                            </desc_content>
                        </desc>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_accelerometer_data()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_accelerometer_data',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_accelerometer_data" ids="zymkey.Zymkey.get_accelerometer_data" module="zymkey"><desc_name xml:space="preserve">get_accelerometer_data</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get current accelerometer data and tap info.</paragraph>
                        <paragraph>This function gets the most recent accelerometer data in units of g
                            forces plus the tap direction per axis.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph><bullet_list bullet="*"><list_item><paragraph><emphasis>An array of accelerometer readings in units of g-force.</emphasis></paragraph></list_item><list_item><paragraph><emphasis>array index 0 = x axis</emphasis> – 1 = y axis
                                                    2 = z axis</paragraph></list_item><list_item><paragraph><emphasis>A value of -1 indicates that the tap event was detected in a</emphasis></paragraph></list_item><list_item><paragraph><emphasis>negative direction for the axis, +1 for a positive direction</emphasis></paragraph></list_item><list_item><paragraph><emphasis>and 0 for stationary.</emphasis></paragraph></list_item></bullet_list></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_time()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_time',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_time" ids="zymkey.Zymkey.get_time" module="zymkey"><desc_name xml:space="preserve">get_time</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">precise</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get current GMT time</paragraph>
                        <paragraph>This function is called to get the time directly from a
                            Zymkey’s Real Time Clock (RTC)</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">precise</literal_strong> – If true, this API returns the time after the next second
                                        falls. This means that the caller could be blocked up to one second.
                                        If False, the API returns immediately with the current time reading.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'lock_binding()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.lock_binding',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.lock_binding" ids="zymkey.Zymkey.lock_binding" module="zymkey"><desc_name xml:space="preserve">lock_binding</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set soft binding lock.</paragraph>
                        <paragraph>This function locks the binding for a specific HSM. This API is
                            only valid for HSM series products.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Raises</field_name>
                                <field_body>
                                    <paragraph><literal_strong>AssertionError</literal_strong> – If <title_reference>ret</title_reference> is a bad return code from the Zymkey library function.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_current_binding_info()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_current_binding_info',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_current_binding_info" ids="zymkey.Zymkey.get_current_binding_info" module="zymkey"><desc_name xml:space="preserve">get_current_binding_info</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get current binding info.</paragraph>
                        <paragraph>This function gets the current binding lock state as well as the
                            current binding state. This API is only valid for devices in the HSM
                            family.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph><bullet_list bullet="*"><list_item><paragraph><emphasis>binding_is_locked</emphasis> – Binary value which expresses the current binding lock state.</paragraph></list_item><list_item><paragraph><emphasis>is_bound</emphasis> – Binary value which expresses the current bind state.</paragraph></list_item></bullet_list></paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_perimeter_event_actions()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.set_perimeter_event_actions',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.set_perimeter_event_actions" ids="zymkey.Zymkey.set_perimeter_event_actions" module="zymkey"><desc_name xml:space="preserve">set_perimeter_event_actions</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">channel</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">action_notify</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">True</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">action_self_destruct</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set perimeter breach action</paragraph>
                        <paragraph>This function specifies the action to take when a perimeter breach
                            event occurs. The possible actions are any combination of:</paragraph>
                        <block_quote>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>Notify host</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Zymkey self-destruct</paragraph>
                                </list_item>
                            </bullet_list>
                        </block_quote>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">channel</literal_strong> – The channel (0 or 1) that the action flags will be applied to</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">action_notify</literal_strong> – Set a perimeter breach to notify. (default = True)</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">action_self_destruct</literal_strong> – Set a perimeter breach to self destruct. (default = False)</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_digital_perimeter_lp_period()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.set_digital_perimeter_lp_period',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.set_digital_perimeter_lp_period" ids="zymkey.Zymkey.set_digital_perimeter_lp_period" module="zymkey"><desc_name xml:space="preserve">set_digital_perimeter_lp_period</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">lp_period</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set the digital perimeter detect low power period (model &gt;= HSM6).</paragraph>
                        <paragraph>This function sets the digital perimeter detect low power period (microseconds).</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">lp_period</literal_strong> – The perimeter detect low power period in microseconds.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_digital_perimeter_lp_max_bits()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.set_digital_perimeter_lp_max_bits',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.set_digital_perimeter_lp_max_bits" ids="zymkey.Zymkey.set_digital_perimeter_lp_max_bits" module="zymkey"><desc_name xml:space="preserve">set_digital_perimeter_lp_max_bits</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">max_num_bits</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set the low power max number of bits (model &gt;= HSM6).</paragraph>
                        <paragraph>This function sets the digital perimeter detect low power max number of bits</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">max_num_bits</literal_strong> – The perimeter detect low power max number of bits</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_digital_perimeter_delays()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.set_digital_perimeter_delays',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.set_digital_perimeter_delays" ids="zymkey.Zymkey.set_digital_perimeter_delays" module="zymkey"><desc_name xml:space="preserve">set_digital_perimeter_delays</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">min_delay_ns</desc_sig_name></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">max_delay_ns</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set the digital perimeter detect delays (model &gt;= HSM6).</paragraph>
                        <paragraph>This function sets the digital perimeter detect delay values.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">min_delay_ns</literal_strong> – The minimum delay in nanoseconds.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">max_delay_ns</literal_strong> – The maximum delay in nanoseconds.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'wait_for_perimeter_event()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.wait_for_perimeter_event',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.wait_for_perimeter_event" ids="zymkey.Zymkey.wait_for_perimeter_event" module="zymkey"><desc_name xml:space="preserve">wait_for_perimeter_event</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">timeout_ms</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">- 1</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Wait for a perimeter breach event to be detected</paragraph>
                        <paragraph>This function is called in order to wait for a perimeter breach
                            event to occur. This function blocks the calling thread unless
                            called with a timeout of zero.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">timeout_ms</literal_strong> – (input) The maximum amount of time in milliseconds to wait for a perimeter breach
                                        event to arrive.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_perimeter_detect_info()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_perimeter_detect_info',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_perimeter_detect_info" ids="zymkey.Zymkey.get_perimeter_detect_info" module="zymkey"><desc_name xml:space="preserve">get_perimeter_detect_info</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get current perimeter detect info.</paragraph>
                        <paragraph>This function gets the timestamp of the first perimeter detect
                            event for the given channel. The index corresponds to the channel specified in set_perimeter_event_actions.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The array of timestamps for each channel for the first detected
                                        event in epoch seconds</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'clear_perimeter_detect_info()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.clear_perimeter_detect_info',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.clear_perimeter_detect_info" ids="zymkey.Zymkey.clear_perimeter_detect_info" module="zymkey"><desc_name xml:space="preserve">clear_perimeter_detect_info</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Clear perimeter detect info.</paragraph>
                        <paragraph>This function clears all perimeter detect info and rearms all
                            perimeter detect channels</paragraph>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_cpu_temp()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_cpu_temp',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_cpu_temp" ids="zymkey.Zymkey.get_cpu_temp" module="zymkey"><desc_name xml:space="preserve">get_cpu_temp</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get current CPU temperature (model &gt;= HSM6).</paragraph>
                        <paragraph>This function gets the current HSM CPU temperature.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The CPU temperature in celsius as a float</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_rtc_drift()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_rtc_drift',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_rtc_drift" ids="zymkey.Zymkey.get_rtc_drift" module="zymkey"><desc_name xml:space="preserve">get_rtc_drift</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get RTC drift (model &gt;= HSM6).</paragraph>
                        <paragraph>This function gets the current RTC drift.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The RTC drift as a float</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_batt_volt()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_batt_volt',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_batt_volt" ids="zymkey.Zymkey.get_batt_volt" module="zymkey"><desc_name xml:space="preserve">get_batt_volt</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get current battery voltage (model &gt;= HSM6).</paragraph>
                        <paragraph>This function gets the current battery voltage.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The battery voltage as a float</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_model_number()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_model_number',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_model_number" ids="zymkey.Zymkey.get_model_number" module="zymkey"><desc_name xml:space="preserve">get_model_number</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get Zymkey model number</paragraph>
                        <paragraph>This function gets the Zymkey model number.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The model number as a string.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_firmware_version()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_firmware_version',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_firmware_version" ids="zymkey.Zymkey.get_firmware_version" module="zymkey"><desc_name xml:space="preserve">get_firmware_version</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get Zymkey firmware version</paragraph>
                        <paragraph>This function gets the Zymkey firmware version.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The firmware version as a string.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'get_serial_number()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.get_serial_number',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.get_serial_number" ids="zymkey.Zymkey.get_serial_number" module="zymkey"><desc_name xml:space="preserve">get_serial_number</desc_name><desc_parameterlist xml:space="preserve"></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Get Zymkey serial number</paragraph>
                        <paragraph>This function gets the Zymkey serial number.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>The serial number as a string.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_battery_voltage_action()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.set_battery_voltage_action',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.set_battery_voltage_action" ids="zymkey.Zymkey.set_battery_voltage_action" module="zymkey"><desc_name xml:space="preserve">set_battery_voltage_action</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">sleep</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">self_destruct</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set battery voltage action. (model &gt;= HSM6)</paragraph>
                        <paragraph>This function specifies the action to take when the
                            battery voltage falls below the threshold set by
                            set_battery_voltage_threshold. If this function is never
                            called, do nothing is default. There are three actions:</paragraph>
                        <block_quote>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>Do nothing</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Go to sleep until battery is replaced</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Self-destruct</paragraph>
                                </list_item>
                            </bullet_list>
                        </block_quote>
                        <paragraph>With sleep and self_destruct set to False, it removes a
                            previously set sleep or self_destruct action.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <bullet_list>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">sleep</literal_strong> – Set the sleep action.</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">self_destruct</literal_strong> – Set the self_destruct action.</paragraph>
                                        </list_item>
                                    </bullet_list>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_battery_voltage_threshold()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.set_battery_voltage_threshold',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.set_battery_voltage_threshold" ids="zymkey.Zymkey.set_battery_voltage_threshold" module="zymkey"><desc_name xml:space="preserve">set_battery_voltage_threshold</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">threshold</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Sets the battery voltage threshold. (model &gt;= HSM6)</paragraph>
                        <paragraph>This function sets the threshold at which if the
                            battery voltage falls bellow, the action set by
                            set_battery_voltage_action will be carried out.
                            The recommended threshold is 2.3V. If this
                            function isn’t called 2.5V is assumed by default.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">threshold</literal_strong> – The threshold in Volts.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_cpu_temp_action()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.set_cpu_temp_action',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.set_cpu_temp_action" ids="zymkey.Zymkey.set_cpu_temp_action" module="zymkey"><desc_name xml:space="preserve">set_cpu_temp_action</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">self_destruct</desc_sig_name><desc_sig_operator classes="o o">=</desc_sig_operator><inline classes="default_value" support_smartquotes="False">False</inline></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Set HSM CPU temperature threshold action. (model &gt;= HSM6)</paragraph>
                        <paragraph>This function specifies the action to take when the
                            HSM CPU temperature falls below the threshold set by
                            set_cpu_low_temp_threshold, or rises above the threshold
                            set by set_cpu_high_temp_threshold. There are two
                            actions to apply:</paragraph>
                        <block_quote>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>Do nothing</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Self-destruct</paragraph>
                                </list_item>
                            </bullet_list>
                        </block_quote>
                        <paragraph>To remove a previously set self-destruct action, call
                            this function with self_destruct=False.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">self_destruct</literal_strong> – Set the self_destruct action.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Returns</field_name>
                                <field_body>
                                    <paragraph>0 for success, less than 0 for failure.</paragraph>
                                </field_body>
                            </field>
                            <field>
                                <field_name>Return type</field_name>
                                <field_body>
                                    <paragraph>TYPE</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_cpu_low_temp_threshold()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.set_cpu_low_temp_threshold',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.set_cpu_low_temp_threshold" ids="zymkey.Zymkey.set_cpu_low_temp_threshold" module="zymkey"><desc_name xml:space="preserve">set_cpu_low_temp_threshold</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">threshold</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Sets the HSM CPU low temperature threshold. (model &gt;= HSM6)</paragraph>
                        <paragraph>This function sets the threshold at which if the
                            on-board HSM CPU’s tempreature falls below, the
                            action set by set_cpu_temp_action will be carried out.
                            WARNING: You can lock yourself out in dev mode if
                            you set a threshold above the CPU’s ambient temperature.
                            The recommended setting is no more than 20C.
                            If this function is never called, -10 degrees celsius is
                            assumed.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">threshold</literal_strong> – The threshold in celsius.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ 'set_cpu_high_temp_threshold()\ (zymkey.Zymkey\ method)',\ 'zymkey.Zymkey.set_cpu_high_temp_threshold',\ '',\ None]"></index>
                <desc classes="py" desctype="method" domain="py" noindex="False" objtype="method">
                    <desc_signature class="Zymkey" fullname="Zymkey.set_cpu_high_temp_threshold" ids="zymkey.Zymkey.set_cpu_high_temp_threshold" module="zymkey"><desc_name xml:space="preserve">set_cpu_high_temp_threshold</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter xml:space="preserve"><desc_sig_name classes="n n">threshold</desc_sig_name></desc_parameter></desc_parameterlist></desc_signature>
                    <desc_content>
                        <paragraph>Sets the HSM CPU high temperature threshold. (model &gt;= HSM6)</paragraph>
                        <paragraph>This function sets the threshold at which if the
                            on-board HSM CPU’s tempreature rises above, the
                            action set by set_cpu_temp_action will be carried out.
                            WARNING: You can lock yourself out in dev mode if
                            you set a threshold below the CPU’s ambient temperature.
                            The recommended setting is no less than 40C.
                            If this function is never called, 65 degrees celsius is
                            assumed.</paragraph>
                        <field_list>
                            <field>
                                <field_name>Parameters</field_name>
                                <field_body>
                                    <paragraph><literal_strong py:class="Zymkey" py:module="zymkey" refspecific="True">threshold</literal_strong> – The threshold in celsius.</paragraph>
                                </field_body>
                            </field>
                        </field_list>
                    </desc_content>
                </desc>
                <index entries="['single',\ '__dict__\ (zymkey.Zymkey\ attribute)',\ 'zymkey.Zymkey.__dict__',\ '',\ None]"></index>
                <desc classes="py" desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Zymkey" fullname="Zymkey.__dict__" ids="zymkey.Zymkey.__dict__" module="zymkey"><desc_name xml:space="preserve">__dict__</desc_name><desc_annotation xml:space="preserve"> = mappingproxy({'__module__': 'zymkey', '__doc__': 'The Zymkey class definition.\n\n    This class provides access to the Zymkey within Python.\n    ', 'EPHEMERAL_KEY_SLOT': -1, '__init__': &lt;function Zymkey.__init__&gt;, '__del__': &lt;function Zymkey.__del__&gt;, 'led_on': &lt;function Zymkey.led_on&gt;, 'hello_world': &lt;function Zymkey.hello_world&gt;, 'led_off': &lt;function Zymkey.led_off&gt;, 'led_flash': &lt;function Zymkey.led_flash&gt;, 'get_random': &lt;function Zymkey.get_random&gt;, 'create_random_file': &lt;function Zymkey.create_random_file&gt;, 'lock': &lt;function Zymkey.lock&gt;, 'unlock': &lt;function Zymkey.unlock&gt;, 'sign': &lt;function Zymkey.sign&gt;, 'sign_digest': &lt;function Zymkey.sign_digest&gt;, 'verify': &lt;function Zymkey.verify&gt;, 'verify_digest': &lt;function Zymkey.verify_digest&gt;, 'ecdh': &lt;function Zymkey.ecdh&gt;, 'create_ecdsa_public_key_file': &lt;function Zymkey.create_ecdsa_public_key_file&gt;, 'create_public_key_file': &lt;function Zymkey.create_public_key_file&gt;, 'get_ecdsa_public_key': &lt;function Zymkey.get_ecdsa_public_key&gt;, 'get_public_key': &lt;function Zymkey.get_public_key&gt;, 'get_slot_alloc_list': &lt;function Zymkey.get_slot_alloc_list&gt;, 'store_foreign_public_key': &lt;function Zymkey.store_foreign_public_key&gt;, 'disable_public_key_export': &lt;function Zymkey.disable_public_key_export&gt;, 'gen_key_pair': &lt;function Zymkey.gen_key_pair&gt;, 'gen_ephemeral_key_pair': &lt;function Zymkey.gen_ephemeral_key_pair&gt;, 'remove_key': &lt;function Zymkey.remove_key&gt;, 'invalidate_ephemeral_key': &lt;function Zymkey.invalidate_ephemeral_key&gt;, 'gen_wallet_master_seed': &lt;function Zymkey.gen_wallet_master_seed&gt;, 'gen_wallet_child_key': &lt;function Zymkey.gen_wallet_child_key&gt;, 'restore_wallet_master_seed_from_bip39_mnemonic': &lt;function Zymkey.restore_wallet_master_seed_from_bip39_mnemonic&gt;, 'get_wallet_node_addr': &lt;function Zymkey.get_wallet_node_addr&gt;, 'get_wallet_key_slot': &lt;function Zymkey.get_wallet_key_slot&gt;, 'set_i2c_address': &lt;function Zymkey.set_i2c_address&gt;, 'set_tap_sensitivity': &lt;function Zymkey.set_tap_sensitivity&gt;, 'wait_for_tap': &lt;function Zymkey.wait_for_tap&gt;, 'ZymkeyAccelAxisData': &lt;class 'zymkey.Zymkey.ZymkeyAccelAxisData'&gt;, 'get_accelerometer_data': &lt;function Zymkey.get_accelerometer_data&gt;, 'get_time': &lt;function Zymkey.get_time&gt;, 'lock_binding': &lt;function Zymkey.lock_binding&gt;, 'get_current_binding_info': &lt;function Zymkey.get_current_binding_info&gt;, 'set_perimeter_event_actions': &lt;function Zymkey.set_perimeter_event_actions&gt;, 'set_digital_perimeter_lp_period': &lt;function Zymkey.set_digital_perimeter_lp_period&gt;, 'set_digital_perimeter_lp_max_bits': &lt;function Zymkey.set_digital_perimeter_lp_max_bits&gt;, 'set_digital_perimeter_delays': &lt;function Zymkey.set_digital_perimeter_delays&gt;, 'wait_for_perimeter_event': &lt;function Zymkey.wait_for_perimeter_event&gt;, 'get_perimeter_detect_info': &lt;function Zymkey.get_perimeter_detect_info&gt;, 'clear_perimeter_detect_info': &lt;function Zymkey.clear_perimeter_detect_info&gt;, 'get_cpu_temp': &lt;function Zymkey.get_cpu_temp&gt;, 'get_rtc_drift': &lt;function Zymkey.get_rtc_drift&gt;, 'get_batt_volt': &lt;function Zymkey.get_batt_volt&gt;, 'get_model_number': &lt;function Zymkey.get_model_number&gt;, 'get_firmware_version': &lt;function Zymkey.get_firmware_version&gt;, 'get_serial_number': &lt;function Zymkey.get_serial_number&gt;, 'set_battery_voltage_action': &lt;function Zymkey.set_battery_voltage_action&gt;, 'set_battery_voltage_threshold': &lt;function Zymkey.set_battery_voltage_threshold&gt;, 'set_cpu_temp_action': &lt;function Zymkey.set_cpu_temp_action&gt;, 'set_cpu_low_temp_threshold': &lt;function Zymkey.set_cpu_low_temp_threshold&gt;, 'set_cpu_high_temp_threshold': &lt;function Zymkey.set_cpu_high_temp_threshold&gt;, '_zkOpen': zymkey.zka.zkalib.zkOpen, '_zkClose': zymkey.zka.zkalib.zkClose, '_zkLEDOn': zymkey.zka.zkalib.zkLEDOn, '_zkLEDOff': zymkey.zka.zkalib.zkLEDOff, '_zkLEDFlash': zymkey.zka.zkalib.zkLEDFlash, '_zkGetRandBytes': zymkey.zka.zkalib.zkGetRandBytes, '_zkCreateRandDataFile': zymkey.zka.zkalib.zkCreateRandDataFile, '_zkLockDataF2F': zymkey.zka.zkalib.zkLockDataF2F, '_zkLockDataB2F': zymkey.zka.zkalib.zkLockDataB2F, '_zkLockDataF2B': zymkey.zka.zkalib.zkLockDataF2B, '_zkLockDataB2B': zymkey.zka.zkalib.zkLockDataB2B, '_zkUnlockDataF2F': zymkey.zka.zkalib.zkUnlockDataF2F, '_zkUnlockDataB2F': zymkey.zka.zkalib.zkUnlockDataB2F, '_zkUnlockDataF2B': zymkey.zka.zkalib.zkUnlockDataF2B, '_zkUnlockDataB2B': zymkey.zka.zkalib.zkUnlockDataB2B, '_zkGenECDSASigFromDigest': zymkey.zka.zkalib.zkGenECDSASigFromDigest, '_zkVerifyECDSASigFromDigest': zymkey.zka.zkalib.zkVerifyECDSASigFromDigest, '_zkVerifyECDSASigFromDigestWithForeignKeySlot': zymkey.zka.zkalib.zkVerifyECDSASigFromDigestWithForeignKeySlot, '_zkStoreForeignPubKey': zymkey.zka.zkalib.zkStoreForeignPubKey, '_zkDisablePubKeyExport': zymkey.zka.zkalib.zkDisablePubKeyExport, '_zkGenKeyPair': zymkey.zka.zkalib.zkGenKeyPair, '_zkGenEphemeralKeyPair': zymkey.zka.zkalib.zkGenEphemeralKeyPair, '_zkRemoveKey': zymkey.zka.zkalib.zkRemoveKey, '_zkInvalidateEphemeralKey': zymkey.zka.zkalib.zkInvalidateEphemeralKey, '_zkDoRawECDH': zymkey.zka.zkalib.zkDoRawECDH, '_zkDoRawECDHWithIntPeerPubkey': zymkey.zka.zkalib.zkDoRawECDHWithIntPeerPubkey, '_zkDoECDHAndKDF': zymkey.zka.zkalib.zkDoECDHAndKDF, '_zkDoECDHAndKDFWithIntPeerPubkey': zymkey.zka.zkalib.zkDoECDHAndKDFWithIntPeerPubkey, '_zkGenWalletMasterSeed': zymkey.zka.zkalib.zkGenWalletMasterSeed, '_zkRestoreWalletMasterSeedFromMnemonic': zymkey.zka.zkalib.zkRestoreWalletMasterSeedFromMnemonic, '_zkGenWalletChildKey': zymkey.zka.zkalib.zkGenWalletChildKey, '_zkGetWalletNodeAddrFromKeySlot': zymkey.zka.zkalib.zkGetWalletNodeAddrFromKeySlot, '_zkGetWalletKeySlotFromNodeAddr': zymkey.zka.zkalib.zkGetWalletKeySlotFromNodeAddr, '_zkGetAllocSlotsList': zymkey.zka.zkalib.zkGetAllocSlotsList, '_zkExportPubKey2File': zymkey.zka.zkalib.zkExportPubKey2File, '_zkExportPubKey': zymkey.zka.zkalib.zkExportPubKey, '_zkLockBinding': zymkey.zka.zkalib.zkLockBinding, '_zkGetCurrentBindingInfo': zymkey.zka.zkalib.zkGetCurrentBindingInfo, '_zkGetCPUTemp': zymkey.zka.zkalib.zkGetCPUTemp, '_zkGetRTCDrift': zymkey.zka.zkalib.zkGetRTCDrift, '_zkGetBatteryVoltage': zymkey.zka.zkalib.zkGetBatteryVoltage, '_zkSetDigitalPerimeterDetectLPPeriod': zymkey.zka.zkalib.zkSetDigitalPerimeterDetectLPPeriod, '_zkSetDigitalPerimeterDetectLPMaxBits': zymkey.zka.zkalib.zkSetDigitalPerimeterDetectLPMaxBits, '_zkSetDigitalPerimeterDetectDelays': zymkey.zka.zkalib.zkSetDigitalPerimeterDetectDelays, '_zkSetBatteryVoltageAction': zymkey.zka.zkalib.zkSetBatteryVoltageAction, '_zkSetBatteryVoltageThreshold': zymkey.zka.zkalib.zkSetBatteryVoltageThreshold, '_zkSetCPUTempAction': zymkey.zka.zkalib.zkSetCPUTempAction, '_zkSetCPULowTempThreshold': zymkey.zka.zkalib.zkSetCPULowTempThreshold, '_zkSetCPUHighTempThreshold': zymkey.zka.zkalib.zkSetCPUHighTempThreshold, '_zkGetECDSAPubKey': zymkey.zka.zkalib.zkGetECDSAPubKey, '_zkSaveECDSAPubKey2File': zymkey.zka.zkalib.zkSaveECDSAPubKey2File, '_zkSetI2CAddr': zymkey.zka.zkalib.zkSetI2CAddr, '_zkSetTapSensitivity': zymkey.zka.zkalib.zkSetTapSensitivity, '_zkGetTime': zymkey.zka.zkalib.zkGetTime, '_zkWaitForTap': zymkey.zka.zkalib.zkWaitForTap, '_zkGetAccelerometerData': zymkey.zka.zkalib.zkGetAccelerometerData, '_zkWaitForPerimeterEvent': zymkey.zka.zkalib.zkWaitForPerimeterEvent, '_zkGetPerimeterDetectInfo': zymkey.zka.zkalib.zkGetPerimeterDetectInfo, '_zkClearPerimeterDetectEvents': zymkey.zka.zkalib.zkClearPerimeterDetectEvents, '_zkSetPerimeterEventAction': zymkey.zka.zkalib.zkSetPerimeterEventAction, '_zkGetModelNumberString': zymkey.zka.zkalib.zkGetModelNumberString, '_zkGetFirmwareVersionString': zymkey.zka.zkalib.zkGetFirmwareVersionString, '_zkGetSerialNumberString': zymkey.zka.zkalib.zkGetSerialNumberString, '__dict__': &lt;attribute '__dict__' of 'Zymkey' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 'Zymkey' objects&gt;, '__annotations__': {}})</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ '__module__\ (zymkey.Zymkey\ attribute)',\ 'zymkey.Zymkey.__module__',\ '',\ None]"></index>
                <desc classes="py" desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Zymkey" fullname="Zymkey.__module__" ids="zymkey.Zymkey.__module__" module="zymkey"><desc_name xml:space="preserve">__module__</desc_name><desc_annotation xml:space="preserve"> = 'zymkey'</desc_annotation></desc_signature>
                    <desc_content>
                    </desc_content>
                </desc>
                <index entries="['single',\ '__weakref__\ (zymkey.Zymkey\ attribute)',\ 'zymkey.Zymkey.__weakref__',\ '',\ None]"></index>
                <desc classes="py" desctype="attribute" domain="py" noindex="False" objtype="attribute">
                    <desc_signature class="Zymkey" fullname="Zymkey.__weakref__" ids="zymkey.Zymkey.__weakref__" module="zymkey"><desc_name xml:space="preserve">__weakref__</desc_name></desc_signature>
                    <desc_content>
                        <paragraph>list of weak references to the object (if defined)</paragraph>
                    </desc_content>
                </desc>
            </desc_content>
        </desc>
    </section>
</document>
