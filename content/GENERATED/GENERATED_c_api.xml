<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/builds/zymbit/zkapputilslib/docs/c/index.rst">
    <section ids="c-api-documentation" names="c\ api\ documentation">
        <title>C API Documentation</title>
        <paragraph>C interface to Zymkey Application Utilities Library. </paragraph>
        <paragraph><paragraph>This file contains the C API to the the Zymkey Application Utilities library. This API facilitates writing user space applications which use Zymkey to perform cryptographic operations, such as:</paragraph><enumerated_list enumtype="arabic" prefix="" suffix="."><list_item><paragraph>Signing of payloads using ECDSA</paragraph></list_item><list_item><paragraph>Verification of payloads that were signed using Zymkey</paragraph></list_item><list_item><paragraph>Exporting the public key that matches Zymkey’s private key</paragraph></list_item><list_item><paragraph>”Locking” and “unlocking” data objects</paragraph></list_item><list_item><paragraph>Generating random data Additionally, there are functions for changing the i2c address (i2c units only), setting tap sensitivity and controlling the LED. </paragraph></list_item></enumerated_list><definition_list><definition_list_item><term><strong>Author</strong></term><definition><paragraph>Scott Miller </paragraph></definition></definition_list_item><definition_list_item><term><strong>Version</strong></term><definition><paragraph>1.0 </paragraph></definition></definition_list_item><definition_list_item><term><strong>Date</strong></term><definition><paragraph>November 17, 2016 </paragraph></definition></definition_list_item><definition_list_item><term><strong>Copyright</strong></term><definition><paragraph>Zymbit, Inc.</paragraph></definition></definition_list_item></definition_list></paragraph>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Zymkey Context</rubric>
            <index entries="['single',\ 'zkOpen\ (C++\ function)',\ '_CPPv46zkOpenP5zkCTX',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv46zkOpenP5zkCTX _CPPv36zkOpenP5zkCTX _CPPv26zkOpenP5zkCTX zkOpen__zkCTXP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a48a562243cd2902b84bb7347a540b8d6" names="zk__app__utils_8h_1a48a562243cd2902b84bb7347a540b8d6"></target>int <desc_name xml:space="preserve">zkOpen</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> *<emphasis>ctx</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Open a Zymkey context. </paragraph>
                    <paragraph><definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (output) returns a pointer to a Zymkey context. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkClose\ (C++\ function)',\ '_CPPv47zkClose5zkCTX',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv47zkClose5zkCTX _CPPv37zkClose5zkCTX _CPPv27zkClose5zkCTX zkClose__zkCTX" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1af427eb2bb73d78bb7acdf723ec99750a" names="zk__app__utils_8h_1af427eb2bb73d78bb7acdf723ec99750a"></target>int <desc_name xml:space="preserve">zkClose</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Close a Zymkey context. </paragraph>
                    <paragraph><definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) The Zymkey context to close </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Random Number Generation</rubric>
            <index entries="['single',\ 'zkCreateRandDataFile\ (C++\ function)',\ '_CPPv420zkCreateRandDataFile5zkCTXPKci',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv420zkCreateRandDataFile5zkCTXPKci _CPPv320zkCreateRandDataFile5zkCTXPKci _CPPv220zkCreateRandDataFile5zkCTXPKci zkCreateRandDataFile__zkCTX.cCP.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a899ce7a6aebb542b5796fc027f021695" names="zk__app__utils_8h_1a899ce7a6aebb542b5796fc027f021695"></target>int <desc_name xml:space="preserve">zkCreateRandDataFile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>dst_filename</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>rdata_sz</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Fill a file with random numbers. </paragraph>
                    <paragraph><definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>dst_filename</literal>: (input) Absolute path name for the destination file. </paragraph></list_item><list_item><paragraph><literal>rdata_sz</literal>: (input) The number of random bytes to generate. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetRandBytes\ (C++\ function)',\ '_CPPv414zkGetRandBytes5zkCTXPP7uint8_ti',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv414zkGetRandBytes5zkCTXPP7uint8_ti _CPPv314zkGetRandBytes5zkCTXPP7uint8_ti _CPPv214zkGetRandBytes5zkCTXPP7uint8_ti zkGetRandBytes__zkCTX.uint8_tPP.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a7b2e6031f9f72f3810c47202ca04b8b5" names="zk__app__utils_8h_1a7b2e6031f9f72f3810c47202ca04b8b5"></target>int <desc_name xml:space="preserve">zkGetRandBytes</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>rdata</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>rdata_sz</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get an array of random bytes. </paragraph>
                    <paragraph><definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>rdata</literal>: (input) Pointer to a pointer of bytes. </paragraph></list_item><list_item><paragraph><literal>rdata_sz</literal>: (input) The number of random bytes to generate. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Lock Data</rubric>
            <index entries="['single',\ 'zkLockDataF2F\ (C++\ function)',\ '_CPPv413zkLockDataF2F5zkCTXPKcPKcb',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv413zkLockDataF2F5zkCTXPKcPKcb _CPPv313zkLockDataF2F5zkCTXPKcPKcb _CPPv213zkLockDataF2F5zkCTXPKcPKcb zkLockDataF2F__zkCTX.cCP.cCP.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1aa0885303a749fe9c049f277ba8c11e21" names="zk__app__utils_8h_1aa0885303a749fe9c049f277ba8c11e21"></target>int <desc_name xml:space="preserve">zkLockDataF2F</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>src_pt_filename</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>dst_ct_filename</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>use_shared_key</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Lock up source (plaintext) data from a file and store the results (ciphertext) in a destination file. </paragraph>
                    <paragraph>This function encrypts and signs a block of plaintext data from a file and stores the result in a destination file. <definition_list><definition_list_item><term><strong>Note</strong></term><definition><paragraph>The zymkey has two keys that can be used for locking/unlocking operations, designated as ‘shared’ and ‘one-way’.<enumerated_list enumtype="loweralpha" prefix="" suffix="."><list_item><paragraph>The one-way key is meant to lock up data only on the local host computer. Data encrypted using this key cannot be exported and deciphered anywhere else.</paragraph></list_item><list_item><paragraph>The shared key is meant for publishing data to other sources that have the capability to generate the shared key, such as the Zymbit cloud server.</paragraph></list_item></enumerated_list></paragraph></definition></definition_list_item><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>src_pt_filename</literal>: (input) The absolute path to the file where the source (plaintext) data is located. </paragraph></list_item><list_item><paragraph><literal>dst_ct_filename</literal>: (input) The absolute path to the file where the destination (ciphertext) data should be deposited. </paragraph></list_item><list_item><paragraph><literal>use_shared_key</literal>: (input) This parameter specifies which key will be used to used to lock the data up. A value of ‘false’ specifies that the Zymkey will use the one-way key whereas ‘true’ specifies that the shared key will be used. Specify ‘true’ for publishing data to another that has the shared key (e.g. Zymbit cloud) and ‘False’ when the data is meant to reside exclusively withing the host computer. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkLockDataB2F\ (C++\ function)',\ '_CPPv413zkLockDataB2F5zkCTXPK7uint8_tiPKcb',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv413zkLockDataB2F5zkCTXPK7uint8_tiPKcb _CPPv313zkLockDataB2F5zkCTXPK7uint8_tiPKcb _CPPv213zkLockDataB2F5zkCTXPK7uint8_tiPKcb zkLockDataB2F__zkCTX.uint8_tCP.i.cCP.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1ad18866d7ca51cacbc750f8a39e6e1e6c" names="zk__app__utils_8h_1ad18866d7ca51cacbc750f8a39e6e1e6c"></target>int <desc_name xml:space="preserve">zkLockDataB2F</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>src_pt</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>src_pt_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>dst_ct_filename</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>use_shared_key</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Lock up source (plaintext) data from a byte array and store the results (ciphertext) in a destination file. </paragraph>
                    <paragraph>This function encrypts and signs a block of binary plaintext data and stores the result in a destination file. <definition_list><definition_list_item><term><strong>Note</strong></term><definition><paragraph>(See zkLockDataF2F for notes about keys)</paragraph></definition></definition_list_item><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>src_pt</literal>: (input) Binary plaintext source byte array. </paragraph></list_item><list_item><paragraph><literal>src_pt_sz</literal>: (input) Size of plaintext source data. </paragraph></list_item><list_item><paragraph><literal>dst_ct_filename</literal>: (input) The absolute path to the file where the destination (ciphertext) data should be deposited. </paragraph></list_item><list_item><paragraph><literal>use_shared_key</literal>: (input) Specifies if shared key is to be used. See zkLockDataF2F. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkLockDataF2B\ (C++\ function)',\ '_CPPv413zkLockDataF2B5zkCTXPKcPP7uint8_tPib',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv413zkLockDataF2B5zkCTXPKcPP7uint8_tPib _CPPv313zkLockDataF2B5zkCTXPKcPP7uint8_tPib _CPPv213zkLockDataF2B5zkCTXPKcPP7uint8_tPib zkLockDataF2B__zkCTX.cCP.uint8_tPP.iP.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1adfed9aa2d8ca8f631fb83ee51e82cb6b" names="zk__app__utils_8h_1adfed9aa2d8ca8f631fb83ee51e82cb6b"></target>int <desc_name xml:space="preserve">zkLockDataF2B</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>src_pt_filename</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>dst_ct</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>dst_ct_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>use_shared_key</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Lock up source (plaintext) data from a file and store the results (ciphertext) in a destination byte array. </paragraph>
                    <paragraph>This function encrypts and signs a block of plaintext data from a file and stores the result in a binary byte array. <definition_list><definition_list_item><term><strong>Note</strong></term><definition><paragraph>(See zkLockDataF2F for notes about keys)</paragraph></definition></definition_list_item><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>src_pt_filename</literal>: (input) The absolute path to the file where the source (plaintext) data is located. </paragraph></list_item><list_item><paragraph><literal>dst_ct</literal>: (output) A pointer to a pointer to an array of unsigned bytes created by this function. This pointer must be freed by the application when no longer needed. </paragraph></list_item><list_item><paragraph><literal>dst_ct_sz</literal>: (output) A pointer to an integer which contains the size of the destination array. </paragraph></list_item><list_item><paragraph><literal>use_shared_key</literal>: (input) Specifies if shared key is to be used. See zkLockDataF2F. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkLockDataB2B\ (C++\ function)',\ '_CPPv413zkLockDataB2B5zkCTXPK7uint8_tiPP7uint8_tPib',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv413zkLockDataB2B5zkCTXPK7uint8_tiPP7uint8_tPib _CPPv313zkLockDataB2B5zkCTXPK7uint8_tiPP7uint8_tPib _CPPv213zkLockDataB2B5zkCTXPK7uint8_tiPP7uint8_tPib zkLockDataB2B__zkCTX.uint8_tCP.i.uint8_tPP.iP.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a98ed878370908120142f5e353a369448" names="zk__app__utils_8h_1a98ed878370908120142f5e353a369448"></target>int <desc_name xml:space="preserve">zkLockDataB2B</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>src_pt</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>src_pt_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>dst_ct</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>dst_ct_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>use_shared_key</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Lock up source (plaintext) data from a byte array and store the results (ciphertext) in a destination byte array. </paragraph>
                    <paragraph>This function encrypts and signs a block of plaintext data and stores the result in a binary byte array. <definition_list><definition_list_item><term><strong>Note</strong></term><definition><paragraph>(See zkLockDataF2F for notes about keys)</paragraph></definition></definition_list_item><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>src_pt</literal>: (input) Binary plaintext source byte array. </paragraph></list_item><list_item><paragraph><literal>src_pt_sz</literal>: (input) Size of plaintext source data. </paragraph></list_item><list_item><paragraph><literal>dst_ct</literal>: (output) A pointer to a pointer to an array of unsigned bytes created by this function. This pointer must be freed by the application when no longer needed. </paragraph></list_item><list_item><paragraph><literal>dst_ct_sz</literal>: (output) A pointer to an integer which contains the size of the destination array. </paragraph></list_item><list_item><paragraph><literal>use_shared_key</literal>: (input) Specifies if shared key is to be used. See zkLockDataF2F. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Unlock Data</rubric>
            <index entries="['single',\ 'zkUnlockDataF2F\ (C++\ function)',\ '_CPPv415zkUnlockDataF2F5zkCTXPKcPKcb',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv415zkUnlockDataF2F5zkCTXPKcPKcb _CPPv315zkUnlockDataF2F5zkCTXPKcPKcb _CPPv215zkUnlockDataF2F5zkCTXPKcPKcb zkUnlockDataF2F__zkCTX.cCP.cCP.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a4a8c161f1dfcdf08d741f5926d5f77f2" names="zk__app__utils_8h_1a4a8c161f1dfcdf08d741f5926d5f77f2"></target>int <desc_name xml:space="preserve">zkUnlockDataF2F</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>src_ct_filename</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>dst_pt_filename</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>use_shared_key</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Unlock source (ciphertext) data from a file and store the results (plaintext) in a destination file. </paragraph>
                    <paragraph>This function verifies a locked object signature and decrypts the associated ciphertext data. <definition_list><definition_list_item><term><strong>Note</strong></term><definition><paragraph>(See zkLockDataF2F for notes about keys)</paragraph></definition></definition_list_item><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>src_ct_filename</literal>: (input) The absolute path to the file where the source (ciphertext) data is located. </paragraph></list_item><list_item><paragraph><literal>dst_pt_filename</literal>: (input) The absolute path to the file where the destination (plaintext) data should be deposited. </paragraph></list_item><list_item><paragraph><literal>use_shared_key</literal>: (input) This parameter specifies which key will be used to used to lock the data up. A value of ‘false’ specifies that the Zymkey will use the one-way key whereas ‘true’ specifies that the shared key will be used. Specify ‘true’ for publishing data to another that has the shared key (e.g. Zymbit cloud) and ‘False’ when the data is meant to reside exclusively withing the host computer. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkUnlockDataB2F\ (C++\ function)',\ '_CPPv415zkUnlockDataB2F5zkCTXPK7uint8_tiPKcb',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv415zkUnlockDataB2F5zkCTXPK7uint8_tiPKcb _CPPv315zkUnlockDataB2F5zkCTXPK7uint8_tiPKcb _CPPv215zkUnlockDataB2F5zkCTXPK7uint8_tiPKcb zkUnlockDataB2F__zkCTX.uint8_tCP.i.cCP.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a2c63c6a31a2a9d787bb670c0e855795c" names="zk__app__utils_8h_1a2c63c6a31a2a9d787bb670c0e855795c"></target>int <desc_name xml:space="preserve">zkUnlockDataB2F</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>src_ct</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>src_ct_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>dst_pt_filename</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>use_shared_key</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Unlock source (ciphertext) data from a byte array and store the results (plaintext) in a destination file. </paragraph>
                    <paragraph>This function verifies a locked object signature and decrypts the associated ciphertext data. <definition_list><definition_list_item><term><strong>Note</strong></term><definition><paragraph>(See zkLockDataF2F for notes about keys)</paragraph></definition></definition_list_item><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>src_ct</literal>: (input) Binary ciphertext source byte array. </paragraph></list_item><list_item><paragraph><literal>src_ct_sz</literal>: (input) Size of ciphertext source data. </paragraph></list_item><list_item><paragraph><literal>dst_pt_filename</literal>: (input) The absolute path to the file where the destination (plaintext) data should be deposited. </paragraph></list_item><list_item><paragraph><literal>use_shared_key</literal>: (input) Specifies if shared key is to be used. See zkLockDataF2F. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkUnlockDataF2B\ (C++\ function)',\ '_CPPv415zkUnlockDataF2B5zkCTXPKcPP7uint8_tPib',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv415zkUnlockDataF2B5zkCTXPKcPP7uint8_tPib _CPPv315zkUnlockDataF2B5zkCTXPKcPP7uint8_tPib _CPPv215zkUnlockDataF2B5zkCTXPKcPP7uint8_tPib zkUnlockDataF2B__zkCTX.cCP.uint8_tPP.iP.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a7553aa0574bf2bfe13b7b32d2774baa8" names="zk__app__utils_8h_1a7553aa0574bf2bfe13b7b32d2774baa8"></target>int <desc_name xml:space="preserve">zkUnlockDataF2B</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>src_ct_filename</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>dst_pt</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>dst_pt_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>use_shared_key</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Unlock source (ciphertext) data from a file and store the results (plaintext) in a destination byte array. </paragraph>
                    <paragraph>This function verifies a locked object signature and decrypts the associated ciphertext data. <definition_list><definition_list_item><term><strong>Note</strong></term><definition><paragraph>(See zkLockDataF2F for notes about keys)</paragraph></definition></definition_list_item><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>src_ct_filename</literal>: (input) The absolute path to the file where the source (ciphertext) data is located. </paragraph></list_item><list_item><paragraph><literal>dst_pt</literal>: (output) A pointer to a pointer to an array of unsigned bytes created by this function. This pointer must be freed by the application when no longer needed. </paragraph></list_item><list_item><paragraph><literal>dst_pt_sz</literal>: (output) A pointer to an integer which contains the size of the destination array. </paragraph></list_item><list_item><paragraph><literal>use_shared_key</literal>: (input) Specifies if shared key is to be used. See zkLockDataF2F. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkUnlockDataB2B\ (C++\ function)',\ '_CPPv415zkUnlockDataB2B5zkCTXPK7uint8_tiPP7uint8_tPib',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv415zkUnlockDataB2B5zkCTXPK7uint8_tiPP7uint8_tPib _CPPv315zkUnlockDataB2B5zkCTXPK7uint8_tiPP7uint8_tPib _CPPv215zkUnlockDataB2B5zkCTXPK7uint8_tiPP7uint8_tPib zkUnlockDataB2B__zkCTX.uint8_tCP.i.uint8_tPP.iP.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1acfe501ceb80ecb6b51385a5573b4da3a" names="zk__app__utils_8h_1acfe501ceb80ecb6b51385a5573b4da3a"></target>int <desc_name xml:space="preserve">zkUnlockDataB2B</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>src_ct</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>src_ct_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>dst_pt</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>dst_pt_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>use_shared_key</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Unlock source (ciphertext) data from a byte array and store the results (plaintext) in a destination byte array. </paragraph>
                    <paragraph>This function verifies a locked object signature and decrypts the associated ciphertext data. <definition_list><definition_list_item><term><strong>Note</strong></term><definition><paragraph>(See zkLockDataF2F for notes about keys)</paragraph></definition></definition_list_item><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>src_ct</literal>: (input) Binary ciphertext source byte array. </paragraph></list_item><list_item><paragraph><literal>src_ct_sz</literal>: (input) Size of ciphertext source data. </paragraph></list_item><list_item><paragraph><literal>dst_pt</literal>: (output) A pointer to a pointer to an array of unsigned bytes created by this function. This pointer must be freed by the application when no longer needed. </paragraph></list_item><list_item><paragraph><literal>dst_pt_sz</literal>: (output) A pointer to an integer which contains the size of the destination array. </paragraph></list_item><list_item><paragraph><literal>use_shared_key</literal>: (input) Specifies if shared key is to be used. See zkLockDataF2F. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">ECDSA</rubric>
            <index entries="['single',\ 'zkGenECDSASigFromDigest\ (C++\ function)',\ '_CPPv423zkGenECDSASigFromDigest5zkCTXPK7uint8_tiPP7uint8_tPi',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv423zkGenECDSASigFromDigest5zkCTXPK7uint8_tiPP7uint8_tPi _CPPv323zkGenECDSASigFromDigest5zkCTXPK7uint8_tiPP7uint8_tPi _CPPv223zkGenECDSASigFromDigest5zkCTXPK7uint8_tiPP7uint8_tPi zkGenECDSASigFromDigest__zkCTX.uint8_tCP.i.uint8_tPP.iP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a803174f6dbeba5d1e59d63bd127cc746" names="zk__app__utils_8h_1a803174f6dbeba5d1e59d63bd127cc746"></target>int <desc_name xml:space="preserve">zkGenECDSASigFromDigest</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>digest</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>sig</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>sig_sz</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Generate a signature using the Zymkey’s ECDSA private key. </paragraph>
                    <paragraph><definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>digest</literal>: (input) This parameter contains the digest of the data that will be used to generate the signature. </paragraph></list_item><list_item><paragraph><literal>slot</literal>: (input) The key slot to generate a signature from. This parameter is only valid for Zymkey models 4i and beyond. </paragraph></list_item><list_item><paragraph><literal>sig</literal>: (output) A pointer to a pointer to an array of unsigned bytes which contains the generated signature. This pointer is created by this function and must be freed by the application when no longer needed. </paragraph></list_item><list_item><paragraph><literal>sig_sz</literal>: (output) A pointer to an integer which contains the size of the signature. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGenECDSASigFromDigestWithRecID\ (C++\ function)',\ '_CPPv432zkGenECDSASigFromDigestWithRecID5zkCTXPK7uint8_tiPP7uint8_tPiP7uint8_t',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv432zkGenECDSASigFromDigestWithRecID5zkCTXPK7uint8_tiPP7uint8_tPiP7uint8_t _CPPv332zkGenECDSASigFromDigestWithRecID5zkCTXPK7uint8_tiPP7uint8_tPiP7uint8_t _CPPv232zkGenECDSASigFromDigestWithRecID5zkCTXPK7uint8_tiPP7uint8_tPiP7uint8_t zkGenECDSASigFromDigestWithRecID__zkCTX.uint8_tCP.i.uint8_tPP.iP.uint8_tP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1ac2237d21c7963e18b9c43c272239f5f3" names="zk__app__utils_8h_1ac2237d21c7963e18b9c43c272239f5f3"></target>int <desc_name xml:space="preserve">zkGenECDSASigFromDigestWithRecID</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>digest</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>sig</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>sig_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t *<emphasis>recovery_id</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Generate a signature using the Zymkey’s ECDSA private key. </paragraph>
                    <paragraph><definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>digest</literal>: (input) This parameter contains the digest of the data that will be used to generate the signature. </paragraph></list_item><list_item><paragraph><literal>slot</literal>: (input) The key slot to generate a signature from. This parameter is only valid for Zymkey models 4i and beyond. </paragraph></list_item><list_item><paragraph><literal>sig</literal>: (output) A pointer to a pointer to an array of unsigned bytes which contains the generated signature. This pointer is created by this function and must be freed by the application when no longer needed. </paragraph></list_item><list_item><paragraph><literal>sig_sz</literal>: (output) A pointer to an integer which contains the size of the signature. </paragraph></list_item><list_item><paragraph><literal>recovery_id</literal>: (output) Returns recovery id value needed for ethereum key recovery. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkVerifyECDSASigFromDigest\ (C++\ function)',\ '_CPPv426zkVerifyECDSASigFromDigest5zkCTXPK7uint8_tiPK7uint8_ti',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv426zkVerifyECDSASigFromDigest5zkCTXPK7uint8_tiPK7uint8_ti _CPPv326zkVerifyECDSASigFromDigest5zkCTXPK7uint8_tiPK7uint8_ti _CPPv226zkVerifyECDSASigFromDigest5zkCTXPK7uint8_tiPK7uint8_ti zkVerifyECDSASigFromDigest__zkCTX.uint8_tCP.i.uint8_tCP.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1af2fff1ad2dc2962c075d86e4c7f32910" names="zk__app__utils_8h_1af2fff1ad2dc2962c075d86e4c7f32910"></target>int <desc_name xml:space="preserve">zkVerifyECDSASigFromDigest</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>digest</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>pubkey_slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>sig</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>sig_sz</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Verify a signature using one of the Zymkey’s public keys. </paragraph>
                    <paragraph>Verify a signature using an internal public key from the Zymkey private/public key store. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for signature verification failed, 1 for signature verification passed, less than 0 for general failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>digest</literal>: (input) This parameter contains the digest of the data that will be used to generate the signature. </paragraph></list_item><list_item><paragraph><literal>pubkey_slot</literal>: (input) The key slot to generate a signature from. This parameter is only valid for Zymkey models 4i and beyond. </paragraph></list_item><list_item><paragraph><literal>sig</literal>: (input) Array of bytes which contains the signature. </paragraph></list_item><list_item><paragraph><literal>sig_sz</literal>: (input) Size of signature. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkVerifyECDSASigFromDigestWithForeignKeySlot\ (C++\ function)',\ '_CPPv444zkVerifyECDSASigFromDigestWithForeignKeySlot5zkCTXPK7uint8_tiPK7uint8_ti',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv444zkVerifyECDSASigFromDigestWithForeignKeySlot5zkCTXPK7uint8_tiPK7uint8_ti _CPPv344zkVerifyECDSASigFromDigestWithForeignKeySlot5zkCTXPK7uint8_tiPK7uint8_ti _CPPv244zkVerifyECDSASigFromDigestWithForeignKeySlot5zkCTXPK7uint8_tiPK7uint8_ti zkVerifyECDSASigFromDigestWithForeignKeySlot__zkCTX.uint8_tCP.i.uint8_tCP.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1ac01a977ceac50cd7a4fb8ddb1672c7b4" names="zk__app__utils_8h_1ac01a977ceac50cd7a4fb8ddb1672c7b4"></target>int <desc_name xml:space="preserve">zkVerifyECDSASigFromDigestWithForeignKeySlot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>digest</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>pubkey_slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>sig</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>sig_sz</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Verify a signature using one of the Zymkey’s foreign public keys. </paragraph>
                    <paragraph>Verify a signature using a public key from the Zymkey foreign key store. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for signature verification failed, 1 for signature verification passed, less than 0 for general failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>digest</literal>: (input) This parameter contains the digest of the data that will be used to generate the signature. </paragraph></list_item><list_item><paragraph><literal>pubkey_slot</literal>: (input) The key slot to generate a signature from. This parameter is only valid for Zymkey models 4i and beyond. </paragraph></list_item><list_item><paragraph><literal>sig</literal>: (input) Array of bytes which contains the signature. </paragraph></list_item><list_item><paragraph><literal>sig_sz</literal>: (input) Size of signature. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">ECDH and KDF</rubric>
            <index entries="['single',\ 'zkDoRawECDH\ (C++\ function)',\ '_CPPv411zkDoRawECDH5zkCTXiPK7uint8_tiPP7uint8_t',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv411zkDoRawECDH5zkCTXiPK7uint8_tiPP7uint8_t _CPPv311zkDoRawECDH5zkCTXiPK7uint8_tiPP7uint8_t _CPPv211zkDoRawECDH5zkCTXiPK7uint8_tiPP7uint8_t zkDoRawECDH__zkCTX.i.uint8_tCP.i.uint8_tPP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1adc168549885a25d8967e6f0537ea0253" names="zk__app__utils_8h_1adc168549885a25d8967e6f0537ea0253"></target>int <desc_name xml:space="preserve">zkDoRawECDH</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>peer_pubkey</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>peer_pubkey_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>pre_master_secret</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Perform a raw ECDH operation. (model &gt;= HSM6) </paragraph>
                    <paragraph>Perform an ECDH operation with no Key Derivation Function (KDF). The raw pre-master secret is returned in the response. The peer public key is presented in the call. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for general failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>slot</literal>: (input) The key slot to use for the local key. If this parameter is -1, the ephemeral key is used. </paragraph></list_item><list_item><paragraph><literal>peer_pubkey</literal>: (input) The peer public key. </paragraph></list_item><list_item><paragraph><literal>peer_pubkey_sz</literal>: (input) Size of the peer public key. </paragraph></list_item><list_item><paragraph><literal>pre_master_secret</literal>: (output) returned pointer to the pre-master secret </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkDoRawECDHWithIntPeerPubkey\ (C++\ function)',\ '_CPPv428zkDoRawECDHWithIntPeerPubkey5zkCTXiibPP7uint8_t',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv428zkDoRawECDHWithIntPeerPubkey5zkCTXiibPP7uint8_t _CPPv328zkDoRawECDHWithIntPeerPubkey5zkCTXiibPP7uint8_t _CPPv228zkDoRawECDHWithIntPeerPubkey5zkCTXiibPP7uint8_t zkDoRawECDHWithIntPeerPubkey__zkCTX.i.i.b.uint8_tPP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1ac1222347f2bd12f688db3a5bbbb83f97" names="zk__app__utils_8h_1ac1222347f2bd12f688db3a5bbbb83f97"></target>int <desc_name xml:space="preserve">zkDoRawECDHWithIntPeerPubkey</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>peer_pubkey_slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>peer_pubkey_slot_is_foreign</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>pre_master_secret</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Perform a raw ECDH operation. (model &gt;= HSM6) </paragraph>
                    <paragraph>Perform an ECDH operation with no Key Derivation Function (KDF). The raw pre-master secret is returned in the response. The peer public key is referenced from the zymkey internal key store. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for general failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>slot</literal>: (input) The key slot to use for the local key. If this parameter is -1, the ephemeral key is used. </paragraph></list_item><list_item><paragraph><literal>peer_pubkey_slot</literal>: (input) The peer public key slot where the peer public key is to be found. </paragraph></list_item><list_item><paragraph><literal>peer_pubkey_slot_is_foreign</literal>: (input) If true, the peer public key slot is found in the foreign public keyring. </paragraph></list_item><list_item><paragraph><literal>pre_master_secret</literal>: (output) returned pointer to the pre-master secret </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkDoECDHAndKDF\ (C++\ function)',\ '_CPPv414zkDoECDHAndKDF5zkCTX16ZK_ECDH_KDF_TYPEiPK7uint8_tiPK7uint8_tiPK7uint8_tiiiPP7uint8_t',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv414zkDoECDHAndKDF5zkCTX16ZK_ECDH_KDF_TYPEiPK7uint8_tiPK7uint8_tiPK7uint8_tiiiPP7uint8_t _CPPv314zkDoECDHAndKDF5zkCTX16ZK_ECDH_KDF_TYPEiPK7uint8_tiPK7uint8_tiPK7uint8_tiiiPP7uint8_t _CPPv214zkDoECDHAndKDF5zkCTX16ZK_ECDH_KDF_TYPEiPK7uint8_tiPK7uint8_tiPK7uint8_tiiiPP7uint8_t zkDoECDHAndKDF__zkCTX.ZK_ECDH_KDF_TYPE.i.uint8_tCP.i.uint8_tCP.i.uint8_tCP.i.i.i.uint8_tPP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a772ea57e2db2aeab6d3e30e32c1af3b9" names="zk__app__utils_8h_1a772ea57e2db2aeab6d3e30e32c1af3b9"></target>int <desc_name xml:space="preserve">zkDoECDHAndKDF</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="ZK_ECDH_KDF_TYPE" refuri="_api/enum_zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919e#_CPPv416ZK_ECDH_KDF_TYPE">ZK_ECDH_KDF_TYPE</reference> <emphasis>kdf_type</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>peer_pubkey</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>peer_pubkey_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>salt</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>salt_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>info</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>info_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>num_iterations</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>derived_key_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>derived_key</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Perform an ECDH operation plus Key Derivation Function. (model &gt;= HSM6) </paragraph>
                    <paragraph>Perform an ECDH operation with Key Derivation Function (KDF). The derived key is returned in the response. The peer public key is presented in the call. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for general failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>slot</literal>: (input) The key slot to use for the local key. If this parameter is -1, the ephemeral key is used. </paragraph></list_item><list_item><paragraph><literal>peer_pubkey</literal>: (input) The peer public key. </paragraph></list_item><list_item><paragraph><literal>peer_pubkey_sz</literal>: (input) Size of the peer public key. </paragraph></list_item><list_item><paragraph><literal>salt</literal>: (input) The salt to use for the selected KDF. </paragraph></list_item><list_item><paragraph><literal>salt_sz</literal>: (input) The salt size. Must be less than or equal to 128 bytes. </paragraph></list_item><list_item><paragraph><literal>info</literal>: (input) The info field to use for RFC 5869. Ignored for PBKDF2. </paragraph></list_item><list_item><paragraph><literal>info_sz</literal>: (input) The size of the info parameter. Must be less than or equal to 128 bytes. </paragraph></list_item><list_item><paragraph><literal>num_iterations</literal>: (input) Number of iterations to carry out (PBKDF only) </paragraph></list_item><list_item><paragraph><literal>derived_key_sz</literal>: (input) The desired number of bytes to return for the KDF. For RFC 5869, this value must be less than 8160 bytes (SHA256) or 16320 (SHA512). </paragraph></list_item><list_item><paragraph><literal>derived_key</literal>: (output) returned pointer to the derived key. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkDoECDHAndKDFWithIntPeerPubkey\ (C++\ function)',\ '_CPPv431zkDoECDHAndKDFWithIntPeerPubkey5zkCTX16ZK_ECDH_KDF_TYPEiibPK7uint8_tiPK7uint8_tiiiPP7uint8_t',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv431zkDoECDHAndKDFWithIntPeerPubkey5zkCTX16ZK_ECDH_KDF_TYPEiibPK7uint8_tiPK7uint8_tiiiPP7uint8_t _CPPv331zkDoECDHAndKDFWithIntPeerPubkey5zkCTX16ZK_ECDH_KDF_TYPEiibPK7uint8_tiPK7uint8_tiiiPP7uint8_t _CPPv231zkDoECDHAndKDFWithIntPeerPubkey5zkCTX16ZK_ECDH_KDF_TYPEiibPK7uint8_tiPK7uint8_tiiiPP7uint8_t zkDoECDHAndKDFWithIntPeerPubkey__zkCTX.ZK_ECDH_KDF_TYPE.i.i.b.uint8_tCP.i.uint8_tCP.i.i.i.uint8_tPP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a38ce470571919d1fc26e877b4c1edc16" names="zk__app__utils_8h_1a38ce470571919d1fc26e877b4c1edc16"></target>int <desc_name xml:space="preserve">zkDoECDHAndKDFWithIntPeerPubkey</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="ZK_ECDH_KDF_TYPE" refuri="_api/enum_zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919e#_CPPv416ZK_ECDH_KDF_TYPE">ZK_ECDH_KDF_TYPE</reference> <emphasis>kdf_type</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>peer_pubkey_slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>peer_pubkey_slot_is_foreign</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>salt</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>salt_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>info</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>info_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>num_iterations</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>derived_key_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>derived_key</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Perform an ECDH operation plus Key Derivation Function. (model &gt;= HSM6) </paragraph>
                    <paragraph>Perform an ECDH operation with Key Derivation Function (KDF). The derived key is returned in the response. The peer public key is referenced from the zymkey internal key store. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for general failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>slot</literal>: (input) The key slot to use for the local key. If this parameter is -1, the ephemeral key is used. </paragraph></list_item><list_item><paragraph><literal>peer_pubkey_slot</literal>: (input) The peer public key slot where the peer public key is to be found. </paragraph></list_item><list_item><paragraph><literal>peer_pubkey_slot_is_foreign</literal>: (input) If true, the peer public key slot is found in the foreign public keyring. </paragraph></list_item><list_item><paragraph><literal>salt</literal>: (input) The salt to use for the selected KDF. </paragraph></list_item><list_item><paragraph><literal>salt_sz</literal>: (input) The salt size. Must be less than or equal to 128 bytes. </paragraph></list_item><list_item><paragraph><literal>info</literal>: (input) The info field to use for RFC 5869. Ignored for PBKDF2. </paragraph></list_item><list_item><paragraph><literal>info_sz</literal>: (input) The size of the info parameter. Must be less than or equal to 128 bytes. </paragraph></list_item><list_item><paragraph><literal>num_iterations</literal>: (input) Number of iterations to carry out (PBKDF only) </paragraph></list_item><list_item><paragraph><literal>derived_key_sz</literal>: (input) The desired number of bytes to return for the KDF. For RFC 5869, this value must be less than 8160 bytes (SHA256) or 16320 (SHA512). </paragraph></list_item><list_item><paragraph><literal>derived_key</literal>: (output) returned pointer to the derived key. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Key Management</rubric>
            <index entries="['single',\ 'zkSaveECDSAPubKey2File\ (C++\ function)',\ '_CPPv422zkSaveECDSAPubKey2File5zkCTXPKci',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv422zkSaveECDSAPubKey2File5zkCTXPKci _CPPv322zkSaveECDSAPubKey2File5zkCTXPKci _CPPv222zkSaveECDSAPubKey2File5zkCTXPKci zkSaveECDSAPubKey2File__zkCTX.cCP.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a2843e04c508eb3b242bf3ec2a10b90bb" names="zk__app__utils_8h_1a2843e04c508eb3b242bf3ec2a10b90bb"></target>int <desc_name xml:space="preserve">zkSaveECDSAPubKey2File</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>filename</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>slot</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>[DEPRECATED] Use zkExportPubKey2File. Store the public key to a host file in PEM format. </paragraph>
                    <paragraph>This function is useful for generating Certificate Signing Requests (CSR). <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>filename</literal>: (input) Filename where PEM formatted public key is to be stored. </paragraph></list_item><list_item><paragraph><literal>slot</literal>: (input) The key slot to retrieve. Only valid for model 4i and above. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkExportPubKey2File\ (C++\ function)',\ '_CPPv419zkExportPubKey2File5zkCTXPKcib',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv419zkExportPubKey2File5zkCTXPKcib _CPPv319zkExportPubKey2File5zkCTXPKcib _CPPv219zkExportPubKey2File5zkCTXPKcib zkExportPubKey2File__zkCTX.cCP.i.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a6446ab63ac57d94a77e5c6373ee24399" names="zk__app__utils_8h_1a6446ab63ac57d94a77e5c6373ee24399"></target>int <desc_name xml:space="preserve">zkExportPubKey2File</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>filename</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>pubkey_slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>slot_is_foreign</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Store the public key to a host file in PEM format. </paragraph>
                    <paragraph>This function is useful for generating Certificate Signing Requests (CSR). <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>filename</literal>: (input) Filename where PEM formatted public key is to be stored. </paragraph></list_item><list_item><paragraph><literal>pubkey_slot</literal>: (input) The key slot to retrieve. Zymkey and HSM4 have slots 0, 1, and 2. </paragraph></list_item><list_item><paragraph><literal>slot_is_foreign</literal>: (input) If true, designates the pubkey slot to come from the foreign keystore. (model &gt;= HSM6) </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetECDSAPubKey\ (C++\ function)',\ '_CPPv416zkGetECDSAPubKey5zkCTXPP7uint8_tPii',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv416zkGetECDSAPubKey5zkCTXPP7uint8_tPii _CPPv316zkGetECDSAPubKey5zkCTXPP7uint8_tPii _CPPv216zkGetECDSAPubKey5zkCTXPP7uint8_tPii zkGetECDSAPubKey__zkCTX.uint8_tPP.iP.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a2c71f05a6b2b14d0440b9d3c81b41bfa" names="zk__app__utils_8h_1a2c71f05a6b2b14d0440b9d3c81b41bfa"></target>int <desc_name xml:space="preserve">zkGetECDSAPubKey</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>pk</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>pk_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>slot</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>[DEPRECATED] Use zkExportPubKey. Gets the public key and stores in a byte array created by this function. </paragraph>
                    <paragraph><definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>pk</literal>: (output) Pointer to a pointer created by this function which contains the public key. </paragraph></list_item><list_item><paragraph><literal>pk_sz</literal>: (output) Pointer to an integer which contains the size of the public key. </paragraph></list_item><list_item><paragraph><literal>slot</literal>: (input) The key slot to retrieve. Only valid for model 4i and above. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkExportPubKey\ (C++\ function)',\ '_CPPv414zkExportPubKey5zkCTXPP7uint8_tPiib',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv414zkExportPubKey5zkCTXPP7uint8_tPiib _CPPv314zkExportPubKey5zkCTXPP7uint8_tPiib _CPPv214zkExportPubKey5zkCTXPP7uint8_tPiib zkExportPubKey__zkCTX.uint8_tPP.iP.i.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a8f43ab1e3cfd0429a33f6e1292dced00" names="zk__app__utils_8h_1a8f43ab1e3cfd0429a33f6e1292dced00"></target>int <desc_name xml:space="preserve">zkExportPubKey</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>pk</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>pk_sz</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>pubkey_slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>slot_is_foreign</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Gets the public key and stores in a byte array created by this function. </paragraph>
                    <paragraph><definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>pk</literal>: (output) Pointer to a pointer created by this function which contains the public key. </paragraph></list_item><list_item><paragraph><literal>pk_sz</literal>: (output) Pointer to an integer which contains the size of the public key. </paragraph></list_item><list_item><paragraph><literal>pubkey_slot</literal>: (input) The key slot to retrieve. Zymkey and HSM4 have slots 0, 1, and 2. </paragraph></list_item><list_item><paragraph><literal>slot_is_foreign</literal>: (input) If true, designates the pubkey slot to come from the foreign keystore (model &gt;= HSM6). </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetAllocSlotsList\ (C++\ function)',\ '_CPPv419zkGetAllocSlotsList5zkCTXbPiPPiPi',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv419zkGetAllocSlotsList5zkCTXbPiPPiPi _CPPv319zkGetAllocSlotsList5zkCTXbPiPPiPi _CPPv219zkGetAllocSlotsList5zkCTXbPiPPiPi zkGetAllocSlotsList__zkCTX.b.iP.iPP.iP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1ac4f620af7fafbf32fd820f6db8861e5f" names="zk__app__utils_8h_1ac4f620af7fafbf32fd820f6db8861e5f"></target>int <desc_name xml:space="preserve">zkGetAllocSlotsList</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>is_foreign</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>max_num_keys</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int **<emphasis>alloc_key_list</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>alloc_key_list_sz</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get the list of allocated keys (model &gt;= HSM6). </paragraph>
                    <paragraph>This function returns a list of all allocated key slots. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>is_foreign</literal>: (input) if true, retrieve allocation list of the foreign keys </paragraph></list_item><list_item><paragraph><literal>max_num_keys</literal>: (input) retrieves the key pool size </paragraph></list_item><list_item><paragraph><literal>alloc_key_list</literal>: (output) a pointer to an array of integers provided by this function to the caller </paragraph></list_item><list_item><paragraph><literal>alloc_key_list_sz</literal>: (output) a pointer to an integer which contains the size of the returned key list </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkStoreForeignPubKey\ (C++\ function)',\ '_CPPv420zkStoreForeignPubKey5zkCTX14ZK_EC_KEY_TYPEP7uint8_ti',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv420zkStoreForeignPubKey5zkCTX14ZK_EC_KEY_TYPEP7uint8_ti _CPPv320zkStoreForeignPubKey5zkCTX14ZK_EC_KEY_TYPEP7uint8_ti _CPPv220zkStoreForeignPubKey5zkCTX14ZK_EC_KEY_TYPEP7uint8_ti zkStoreForeignPubKey__zkCTX.ZK_EC_KEY_TYPE.uint8_tP.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a558efd96315d7e1e7245e52cdfa0bd0e" names="zk__app__utils_8h_1a558efd96315d7e1e7245e52cdfa0bd0e"></target>int <desc_name xml:space="preserve">zkStoreForeignPubKey</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="ZK_EC_KEY_TYPE" refuri="_api/enum_zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7#_CPPv414ZK_EC_KEY_TYPE">ZK_EC_KEY_TYPE</reference> <emphasis>pk_type</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t *<emphasis>pk</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>pk_sz</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Store a new foreign public key in Zymkey. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function stores a new foreign public key in the Zymkey public key ring. This public key can be used for signature verification in use cases where it is desirable to hide the public key. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>allocated slot number in foreign key store, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>pk_type</literal>: (input) The type of the public key. </paragraph></list_item><list_item><paragraph><literal>pk</literal>: (input) Pointer to the public key to store. </paragraph></list_item><list_item><paragraph><literal>pk_sz</literal>: (input) The public key size. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkDisablePubKeyExport\ (C++\ function)',\ '_CPPv421zkDisablePubKeyExport5zkCTXib',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv421zkDisablePubKeyExport5zkCTXib _CPPv321zkDisablePubKeyExport5zkCTXib _CPPv221zkDisablePubKeyExport5zkCTXib zkDisablePubKeyExport__zkCTX.i.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a156c256f416f2e5b466fe7379d64899b" names="zk__app__utils_8h_1a156c256f416f2e5b466fe7379d64899b"></target>int <desc_name xml:space="preserve">zkDisablePubKeyExport</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>pubkey_slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>slot_is_foreign</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Prevent a public key from being exported to the host. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function prevents the public key at the specified slot from being exported to the host using the API zkExportPubKey. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>pubkey_slot</literal>: (input) The key slot to disable pubkey export on. </paragraph></list_item><list_item><paragraph><literal>slot_is_foreign</literal>: (input) The slot parameter refers to a slot in the foreign keyring. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGenKeyPair\ (C++\ function)',\ '_CPPv412zkGenKeyPair5zkCTX14ZK_EC_KEY_TYPE',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv412zkGenKeyPair5zkCTX14ZK_EC_KEY_TYPE _CPPv312zkGenKeyPair5zkCTX14ZK_EC_KEY_TYPE _CPPv212zkGenKeyPair5zkCTX14ZK_EC_KEY_TYPE zkGenKeyPair__zkCTX.ZK_EC_KEY_TYPE" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a7d440c70c23f8fe1144a4a95b2ada1e3" names="zk__app__utils_8h_1a7d440c70c23f8fe1144a4a95b2ada1e3"></target>int <desc_name xml:space="preserve">zkGenKeyPair</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="ZK_EC_KEY_TYPE" refuri="_api/enum_zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7#_CPPv414ZK_EC_KEY_TYPE">ZK_EC_KEY_TYPE</reference> <emphasis>type</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Generate a new persistent key pair. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function generates a new key pair of the specified type and store it persistently. This key pair cannot be used as part of the zymkey’s digital wallet operations. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>allocated slot number if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>type</literal>: (input) The type of key to generate (ZK_EC_KEY_TYPE). </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGenEphemeralKeyPair\ (C++\ function)',\ '_CPPv421zkGenEphemeralKeyPair5zkCTX14ZK_EC_KEY_TYPE',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv421zkGenEphemeralKeyPair5zkCTX14ZK_EC_KEY_TYPE _CPPv321zkGenEphemeralKeyPair5zkCTX14ZK_EC_KEY_TYPE _CPPv221zkGenEphemeralKeyPair5zkCTX14ZK_EC_KEY_TYPE zkGenEphemeralKeyPair__zkCTX.ZK_EC_KEY_TYPE" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1ab97b544f292dae99810a4d2128a0ba53" names="zk__app__utils_8h_1ab97b544f292dae99810a4d2128a0ba53"></target>int <desc_name xml:space="preserve">zkGenEphemeralKeyPair</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="ZK_EC_KEY_TYPE" refuri="_api/enum_zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7#_CPPv414ZK_EC_KEY_TYPE">ZK_EC_KEY_TYPE</reference> <emphasis>type</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Generate an ephemeral key pair. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function generates an ephemeral key pair of the specified type. Ephemeral key pairs are useful when performing ECDH for time-of-flight encryption. Only one ephemeral key slot is available and is not persistent between reboots. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>type</literal>: (input) The type of key to generate (ZK_EC_KEY_TYPE). </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkRemoveKey\ (C++\ function)',\ '_CPPv411zkRemoveKey5zkCTXib',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv411zkRemoveKey5zkCTXib _CPPv311zkRemoveKey5zkCTXib _CPPv211zkRemoveKey5zkCTXib zkRemoveKey__zkCTX.i.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a68c45329be1247878b4d0d9a690e2915" names="zk__app__utils_8h_1a68c45329be1247878b4d0d9a690e2915"></target>int <desc_name xml:space="preserve">zkRemoveKey</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>slot_is_foreign</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Remove a key pair or a foreign public key. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function deletes a key pair or a foreign public key from persistent storage. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>slot</literal>: (input) The slot </paragraph></list_item><list_item><paragraph><literal>slot_is_foreign</literal>: (input) The slot parameter refers to a slot in the foreign keyring. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkInvalidateEphemeralKey\ (C++\ function)',\ '_CPPv424zkInvalidateEphemeralKey5zkCTX',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv424zkInvalidateEphemeralKey5zkCTX _CPPv324zkInvalidateEphemeralKey5zkCTX _CPPv224zkInvalidateEphemeralKey5zkCTX zkInvalidateEphemeralKey__zkCTX" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a6d74d4a5fd5748dd90c30c372bf23e2b" names="zk__app__utils_8h_1a6d74d4a5fd5748dd90c30c372bf23e2b"></target>int <desc_name xml:space="preserve">zkInvalidateEphemeralKey</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Invalidate the ephemeral key. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function invalidates the ephemeral key. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Digital Wallet (BIP32/39/44)</rubric>
            <index entries="['single',\ 'zkGenWalletMasterSeedWithBip39\ (C++\ function)',\ '_CPPv430zkGenWalletMasterSeedWithBip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKcPPc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv430zkGenWalletMasterSeedWithBip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKcPPc _CPPv330zkGenWalletMasterSeedWithBip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKcPPc _CPPv230zkGenWalletMasterSeedWithBip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKcPPc zkGenWalletMasterSeedWithBip39__zkCTX.ZK_EC_KEY_TYPE.cCP.cCP.uint8_tCP.i.cCP.cPP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1af9bd92c530645915117da68248dffecd" names="zk__app__utils_8h_1af9bd92c530645915117da68248dffecd"></target>int <desc_name xml:space="preserve">zkGenWalletMasterSeedWithBip39</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="ZK_EC_KEY_TYPE" refuri="_api/enum_zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7#_CPPv414ZK_EC_KEY_TYPE">ZK_EC_KEY_TYPE</reference> <emphasis>type</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>variant</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>wallet_name</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>master_generator_key</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>master_generator_key_size</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>passphrase</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">char **<emphasis>mnemonic</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Generate master seed to start a new blockchain wallet. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function generates a new blockchain master seed for creating a new wallet. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>allocated slot number if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>type</literal>: (input) The type of key to generate (ZK_EC_KEY_TYPE). </paragraph></list_item><list_item><paragraph><literal>variant</literal>: (input) The variant of the key_type to generate. Currently only “cardano” is supported for ed25519. </paragraph></list_item><list_item><paragraph><literal>wallet_name</literal>: (input) An ASCII string which contains the name of the wallet. </paragraph></list_item><list_item><paragraph><literal>master_generator_key</literal>: (input) The master generator key used to help generate the master seed. Can be empty string. </paragraph></list_item><list_item><paragraph><literal>master_generator_key_size</literal>: (input) The size of the master generator key. If 0, no master generator key is used in the formulation of the master seed. </paragraph></list_item><list_item><paragraph><literal>passphrase</literal>: (input) The passphrase to generate a different bip39_mnemonic. Can be empty string. </paragraph></list_item><list_item><paragraph><literal>mnemonic</literal>: (output) A pointer to the mnemonic sentence. If NULL, the master seed is generated per BIP32. Otherwise, the master seed is generated per recovery strategy and the mnemonic sentence is returned in this parameter. The string is null terminated and encoded in UTF-8 NFKD from the English dictionary. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGenWalletMasterSeedWithSlip39\ (C++\ function)',\ '_CPPv431zkGenWalletMasterSeedWithSlip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiiiiPKc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv431zkGenWalletMasterSeedWithSlip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiiiiPKc _CPPv331zkGenWalletMasterSeedWithSlip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiiiiPKc _CPPv231zkGenWalletMasterSeedWithSlip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiiiiPKc zkGenWalletMasterSeedWithSlip39__zkCTX.ZK_EC_KEY_TYPE.cCP.cCP.uint8_tCP.i.i.i.i.cCP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a25df1c3c54694fb22585c52400fa4f3b" names="zk__app__utils_8h_1a25df1c3c54694fb22585c52400fa4f3b"></target>int <desc_name xml:space="preserve">zkGenWalletMasterSeedWithSlip39</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="ZK_EC_KEY_TYPE" refuri="_api/enum_zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7#_CPPv414ZK_EC_KEY_TYPE">ZK_EC_KEY_TYPE</reference> <emphasis>type</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>variant</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>wallet_name</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>master_generator_key</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>master_generator_key_size</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>group_count</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>group_threshold</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>group_iteration_exponent</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>master_passphrase</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Generate master seed to start a new blockchain wallet. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function opens a session to generate a new blockchain master seed with the ability to recover from slip39 shards. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful on opening a slip39 session, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>type</literal>: (input) The type of key to generate (ZK_EC_KEY_TYPE). </paragraph></list_item><list_item><paragraph><literal>variant</literal>: (input) The variant of the key_type to generate. Currently only “cardano” is supported for ed25519. </paragraph></list_item><list_item><paragraph><literal>wallet_name</literal>: (input) An ASCII string which contains the name of the wallet. </paragraph></list_item><list_item><paragraph><literal>master_generator_key</literal>: (input) The master generator key used to help generate the master seed. Can be empty string. </paragraph></list_item><list_item><paragraph><literal>master_generator_key_size</literal>: (input) The size of the master generator key. If 0, no master generator key is used in the formulation of the master seed. </paragraph></list_item><list_item><paragraph><literal>group_count</literal>: (input) The total count of groups(shards) to split into. </paragraph></list_item><list_item><paragraph><literal>group_threshold</literal>: (input) The count of groups(shards) needed to restore the master seed. </paragraph></list_item><list_item><paragraph><literal>group_iteration_exponent</literal>: (input) The iteration of exponent of slip39. </paragraph></list_item><list_item><paragraph><literal>master_passphrase</literal>: (input) The master passphrase used for slip 39 recovery process. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkSetSlip39GroupInfo\ (C++\ function)',\ '_CPPv420zkSetSlip39GroupInfo5zkCTXiii',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv420zkSetSlip39GroupInfo5zkCTXiii _CPPv320zkSetSlip39GroupInfo5zkCTXiii _CPPv220zkSetSlip39GroupInfo5zkCTXiii zkSetSlip39GroupInfo__zkCTX.i.i.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a1ac12c55fe8844955657ff0f6fe9db9e" names="zk__app__utils_8h_1a1ac12c55fe8844955657ff0f6fe9db9e"></target>int <desc_name xml:space="preserve">zkSetSlip39GroupInfo</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>group_index</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>member_count</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>member_threshold</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Set the active slip39 group and the amount of members needed. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function configures the active group to generate the number of shards requested for the active group. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful on configuring the active group, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>group_index</literal>: (input) The index of the group to generate shards from. Index starts at 0. </paragraph></list_item><list_item><paragraph><literal>member_count</literal>: (input) The total amount of member shards in this group to generate. </paragraph></list_item><list_item><paragraph><literal>member_threshold</literal>: (input) The number of member shards needed to recreate this group in recovery. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkAddSlip39MemberPassword\ (C++\ function)',\ '_CPPv425zkAddSlip39MemberPassword5zkCTXPKcPPc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv425zkAddSlip39MemberPassword5zkCTXPKcPPc _CPPv325zkAddSlip39MemberPassword5zkCTXPKcPPc _CPPv225zkAddSlip39MemberPassword5zkCTXPKcPPc zkAddSlip39MemberPassword__zkCTX.cCP.cPP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a4c1b2181374018e5ef1e9348729d5edc" names="zk__app__utils_8h_1a4c1b2181374018e5ef1e9348729d5edc"></target>int <desc_name xml:space="preserve">zkAddSlip39MemberPassword</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>passhrase</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">char **<emphasis>mnemonic_sentence</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Generate a new slip39 member shard. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function generates a new slip39 member shard. The shard can optionally have a password attached to it. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful on opening a slip39 session, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>passhrase</literal>: (input) Password for the shard. Can be empty string. </paragraph></list_item><list_item><paragraph><literal>mnemonic_sentence</literal>: (output) The mnemonic sentence of the shard. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkCancelSlip39Session\ (C++\ function)',\ '_CPPv421zkCancelSlip39Session5zkCTX',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv421zkCancelSlip39Session5zkCTX _CPPv321zkCancelSlip39Session5zkCTX _CPPv221zkCancelSlip39Session5zkCTX zkCancelSlip39Session__zkCTX" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a1594cb135b1301805baf466ec4771bf9" names="zk__app__utils_8h_1a1594cb135b1301805baf466ec4771bf9"></target>int <desc_name xml:space="preserve">zkCancelSlip39Session</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Cancels the current active slip39 session (model &gt;= HSM6) </paragraph>
                    <paragraph>This function cancels open active slip39 sessions. For both generation and restore slip39 sessions. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful on aborting a slip39 session, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGenOversightWallet\ (C++\ function)',\ '_CPPv420zkGenOversightWallet5zkCTX14ZK_EC_KEY_TYPEPKcPK7uint8_tPK7uint8_tPKcPKc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv420zkGenOversightWallet5zkCTX14ZK_EC_KEY_TYPEPKcPK7uint8_tPK7uint8_tPKcPKc _CPPv320zkGenOversightWallet5zkCTX14ZK_EC_KEY_TYPEPKcPK7uint8_tPK7uint8_tPKcPKc _CPPv220zkGenOversightWallet5zkCTX14ZK_EC_KEY_TYPEPKcPK7uint8_tPK7uint8_tPKcPKc zkGenOversightWallet__zkCTX.ZK_EC_KEY_TYPE.cCP.uint8_tCP.uint8_tCP.cCP.cCP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a18da27cf2ed94be41ecc357b8289e074" names="zk__app__utils_8h_1a18da27cf2ed94be41ecc357b8289e074"></target>int <desc_name xml:space="preserve">zkGenOversightWallet</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="ZK_EC_KEY_TYPE" refuri="_api/enum_zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7#_CPPv414ZK_EC_KEY_TYPE">ZK_EC_KEY_TYPE</reference> <emphasis>type</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>variant</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>pub_key</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>chain_code</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>node_addr</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>wallet_name</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Generate master seed to start a new blockchain wallet. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function generates a new blockchain master seed for creating a new wallet. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>allocated slot number if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>type</literal>: (input) The type of key to generate (ZK_EC_KEY_TYPE). </paragraph></list_item><list_item><paragraph><literal>pub_key</literal>: (input) The public key to create the oversight wallet from. Should come from a hardened node in a node tree. </paragraph></list_item><list_item><paragraph><literal>chain_code</literal>: (input) The chain code of the public key being used to create the oversight wallet. </paragraph></list_item><list_item><paragraph><literal>node_addr</literal>: (input) The node address index of the public key being used. </paragraph></list_item><list_item><paragraph><literal>wallet_name</literal>: (input) The name of the oversight wallet being created. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGenWalletChildKey\ (C++\ function)',\ '_CPPv419zkGenWalletChildKey5zkCTXi8uint32_tbbPP7uint8_t',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv419zkGenWalletChildKey5zkCTXi8uint32_tbbPP7uint8_t _CPPv319zkGenWalletChildKey5zkCTXi8uint32_tbbPP7uint8_t _CPPv219zkGenWalletChildKey5zkCTXi8uint32_tbbPP7uint8_t zkGenWalletChildKey__zkCTX.i.uint32_t.b.b.uint8_tPP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a4d052b8491006e91425266cdb090aad9" names="zk__app__utils_8h_1a4d052b8491006e91425266cdb090aad9"></target>int <desc_name xml:space="preserve">zkGenWalletChildKey</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>parent_key_slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint32_t <emphasis>index</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>is_hardened</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>return_chain_code</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint8_t **<emphasis>chain_code</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Generate child key from a parent key in a blockchain wallet . (model &gt;= HSM6) </paragraph>
                    <paragraph>This function generates a new child key descendent from a specified parent key in a wallet. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>allocated slot number if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>parent_key_slot</literal>: (input) The parent key slot to base the child key derivation on. </paragraph></list_item><list_item><paragraph><literal>index</literal>: (input) The index of the child seed. This determines the node address as well as the outcome of the key generation. </paragraph></list_item><list_item><paragraph><literal>is_hardened</literal>: (input) If true, a hardened key is generated. </paragraph></list_item><list_item><paragraph><literal>return_chain_code</literal>: (input) If true, returns the chain code of the public key that was just generated. Has to be a hardened node as well. </paragraph></list_item><list_item><paragraph><literal>chain_code</literal>: (output) the chain code of the public key </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkRestoreWalletMasterSeedFromBip39Mnemonic\ (C++\ function)',\ '_CPPv442zkRestoreWalletMasterSeedFromBip39Mnemonic5zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKcPc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv442zkRestoreWalletMasterSeedFromBip39Mnemonic5zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKcPc _CPPv342zkRestoreWalletMasterSeedFromBip39Mnemonic5zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKcPc _CPPv242zkRestoreWalletMasterSeedFromBip39Mnemonic5zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKcPc zkRestoreWalletMasterSeedFromBip39Mnemonic__zkCTX.ZK_EC_KEY_TYPE.cCP.cCP.uint8_tCP.i.cCP.cP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1ab1a86b4682614d5ad342e1bc8b4d9fe9" names="zk__app__utils_8h_1ab1a86b4682614d5ad342e1bc8b4d9fe9"></target>int <desc_name xml:space="preserve">zkRestoreWalletMasterSeedFromBip39Mnemonic</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="ZK_EC_KEY_TYPE" refuri="_api/enum_zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7#_CPPv414ZK_EC_KEY_TYPE">ZK_EC_KEY_TYPE</reference> <emphasis>type</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>variant</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>wallet_name</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>master_generator_key</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>master_generator_key_size</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>bip39_passphrase</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">char *<emphasis>bip39_mnemonic</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Restore a master seed from a BIP39 mnemonic and a master generator key. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function restores a wallet master seed from a supplied BIP39 mnemonic string and a master generator key. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>allocated slot number if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>type</literal>: (input) The type of key to generate (ZK_KEY_TYPE). </paragraph></list_item><list_item><paragraph><literal>variant</literal>: (input) The variant of the key_type to generate. Currently only “cardano” is supported for ed25519. </paragraph></list_item><list_item><paragraph><literal>wallet_name</literal>: (input) An ASCII string which contains the name of the wallet. </paragraph></list_item><list_item><paragraph><literal>master_generator_key</literal>: (input) The master generator key used to help generate the master seed. </paragraph></list_item><list_item><paragraph><literal>master_generator_key_size</literal>: (input) The size of the master generator key. If 0, no master generator key is used in the formulation of the master seed. </paragraph></list_item><list_item><paragraph><literal>bip39_passphrase</literal>: (input) The passphrase used to generate the bip39_mnemonic. </paragraph></list_item><list_item><paragraph><literal>bip39_mnemonic</literal>: (input) The bip39_mnemonic string, null terminated and UTF-8 NFKD encoded from the BIP39 English dictionary. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkRestoreWalletMasterSeedFromSlip39\ (C++\ function)',\ '_CPPv435zkRestoreWalletMasterSeedFromSlip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv435zkRestoreWalletMasterSeedFromSlip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKc _CPPv335zkRestoreWalletMasterSeedFromSlip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKc _CPPv235zkRestoreWalletMasterSeedFromSlip395zkCTX14ZK_EC_KEY_TYPEPKcPKcPK7uint8_tiPKc zkRestoreWalletMasterSeedFromSlip39__zkCTX.ZK_EC_KEY_TYPE.cCP.cCP.uint8_tCP.i.cCP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a4885b80bf9495bb383ba036aad5ace3e" names="zk__app__utils_8h_1a4885b80bf9495bb383ba036aad5ace3e"></target>int <desc_name xml:space="preserve">zkRestoreWalletMasterSeedFromSlip39</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="ZK_EC_KEY_TYPE" refuri="_api/enum_zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7#_CPPv414ZK_EC_KEY_TYPE">ZK_EC_KEY_TYPE</reference> <emphasis>type</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>variant</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>wallet_name</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> uint8_t *<emphasis>master_generator_key</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>master_generator_key_size</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>slip39_passphrase</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Open a SLIP39 restore master seed session (model &gt;= HSM6). </paragraph>
                    <paragraph>This function starts a restore slip39 session, in order to start feeding shards into. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>allocated slot number if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>type</literal>: (input) The type of key to generate (ZK_KEY_TYPE). </paragraph></list_item><list_item><paragraph><literal>variant</literal>: (input) The variant of the key_type to generate. Currently only “cardano” is supported for ed25519. </paragraph></list_item><list_item><paragraph><literal>wallet_name</literal>: (input) An ASCII string which contains the name of the wallet. </paragraph></list_item><list_item><paragraph><literal>master_generator_key</literal>: (input) The master generator key used to help generate the master seed. </paragraph></list_item><list_item><paragraph><literal>master_generator_key_size</literal>: (input) The size of the master generator key. If 0, no master generator key is used in the formulation of the master seed. </paragraph></list_item><list_item><paragraph><literal>slip39_passphrase</literal>: (input) The master passphrase. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkAddRestoreSlip39Mnemonic\ (C++\ function)',\ '_CPPv426zkAddRestoreSlip39Mnemonic5zkCTXPKcPKc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv426zkAddRestoreSlip39Mnemonic5zkCTXPKcPKc _CPPv326zkAddRestoreSlip39Mnemonic5zkCTXPKcPKc _CPPv226zkAddRestoreSlip39Mnemonic5zkCTXPKcPKc zkAddRestoreSlip39Mnemonic__zkCTX.cCP.cCP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a89bbc8c75972863a0740aa34f49755c0" names="zk__app__utils_8h_1a89bbc8c75972863a0740aa34f49755c0"></target>int <desc_name xml:space="preserve">zkAddRestoreSlip39Mnemonic</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>passphrase</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>mnemonic_sentence</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Feed a slip39 shard to restore a master seed (model &gt;= HSM6). </paragraph>
                    <paragraph>This function will feed a shard to the module until the conditions are met and a master seed is generated. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>allocated slot number when all shards required are fed in, less than 0 for no change. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>passphrase</literal>: (input) The passphrase that was attached to the shard. </paragraph></list_item><list_item><paragraph><literal>mnemonic_sentence</literal>: (input) The twenty-four word sentence mnemonic shard. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetWalletNodeAddrFromKeySlot\ (C++\ function)',\ '_CPPv430zkGetWalletNodeAddrFromKeySlot5zkCTXiPPcPPcPi',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv430zkGetWalletNodeAddrFromKeySlot5zkCTXiPPcPPcPi _CPPv330zkGetWalletNodeAddrFromKeySlot5zkCTXiPPcPPcPi _CPPv230zkGetWalletNodeAddrFromKeySlot5zkCTXiPPcPPcPi zkGetWalletNodeAddrFromKeySlot__zkCTX.i.cPP.cPP.iP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a5d6c1880618a06e360fad5f3b6b554a9" names="zk__app__utils_8h_1a5d6c1880618a06e360fad5f3b6b554a9"></target>int <desc_name xml:space="preserve">zkGetWalletNodeAddrFromKeySlot</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">char **<emphasis>node_addr</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">char **<emphasis>wallet_name</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>master_seed_slot</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Derive the node address from a key slot number. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function derives a node address from an input key slot number. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>slot</literal>: (input) A key slot number that is part of a digital wallet. </paragraph></list_item><list_item><paragraph><literal>node_addr</literal>: (output) A pointer to a pointer which will contain the node address in ASCII. </paragraph></list_item><list_item><paragraph><literal>wallet_name</literal>: (output) A pointer to a pointer which will contain the wallet name in ASCII. If NULL, this parameter will not be retrieved. </paragraph></list_item><list_item><paragraph><literal>master_seed_slot</literal>: (output) A pointer to an integer which will contain the master seed key slot. If NULL, this parameter will not be retrieved. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetWalletKeySlotFromNodeAddr\ (C++\ function)',\ '_CPPv430zkGetWalletKeySlotFromNodeAddr5zkCTXPKcPKciPi',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv430zkGetWalletKeySlotFromNodeAddr5zkCTXPKcPKciPi _CPPv330zkGetWalletKeySlotFromNodeAddr5zkCTXPKcPKciPi _CPPv230zkGetWalletKeySlotFromNodeAddr5zkCTXPKcPKciPi zkGetWalletKeySlotFromNodeAddr__zkCTX.cCP.cCP.i.iP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1ab8d71adf4a175f319cc56ce83fc745d0" names="zk__app__utils_8h_1ab8d71adf4a175f319cc56ce83fc745d0"></target>int <desc_name xml:space="preserve">zkGetWalletKeySlotFromNodeAddr</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>node_addr</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>wallet_name</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>master_seed_slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>slot</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Derive the slot address from a node address. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function returns the slot number associated with a given node address. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>node_addr</literal>: (input) A pointer which contains the node address in ASCII. </paragraph></list_item><list_item><paragraph><literal>wallet_name</literal>: (input) A pointer which contains the wallet name in ASCII, used to identify the wallet identity. If desired, this parameter can be NULL and the master_seed_slot parameter can be specified instead. </paragraph></list_item><list_item><paragraph><literal>master_seed_slot</literal>: (input) The master seed slot. Can be used to specify the wallet identity instead of the wallet name. </paragraph></list_item><list_item><paragraph><literal>slot</literal>: (output) A pointer to an integer which contains the associated key slot. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Perimeter Detect</rubric>
            <index entries="['single',\ 'zkSetPerimeterEventAction\ (C++\ function)',\ '_CPPv425zkSetPerimeterEventAction5zkCTXi8uint32_t',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv425zkSetPerimeterEventAction5zkCTXi8uint32_t _CPPv325zkSetPerimeterEventAction5zkCTXi8uint32_t _CPPv225zkSetPerimeterEventAction5zkCTXi8uint32_t zkSetPerimeterEventAction__zkCTX.i.uint32_t" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a099e0f45cd4ddeaddc9089ee1ee4618f" names="zk__app__utils_8h_1a099e0f45cd4ddeaddc9089ee1ee4618f"></target>int <desc_name xml:space="preserve">zkSetPerimeterEventAction</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>channel</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint32_t <emphasis>action_flags</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Set perimeter breach action. </paragraph>
                    <paragraph>This function specifies the action to take when a perimeter breach event occurs. The possible actions are any combination of:<bullet_list><list_item><paragraph>Notify host</paragraph></list_item><list_item><paragraph>Zymkey self-destruct <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>channel</literal>: (input) The channel (0 or 1) that the action flags will be applied to. </paragraph></list_item><list_item><paragraph><literal>action_flags</literal>: (input) The actions to apply to the perimeter event channel:<bullet_list><list_item><paragraph>Notify (ZK_PERIMETER_EVENT_ACTION_NOTIFY)</paragraph></list_item><list_item><paragraph>Self-destruct (ZK_PERIMETER_EVENT_ACTION_SELF_DESTRUCT) </paragraph></list_item></bullet_list></paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph></list_item></bullet_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkSetDigitalPerimeterDetectLPPeriod\ (C++\ function)',\ '_CPPv435zkSetDigitalPerimeterDetectLPPeriod5zkCTXi',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv435zkSetDigitalPerimeterDetectLPPeriod5zkCTXi _CPPv335zkSetDigitalPerimeterDetectLPPeriod5zkCTXi _CPPv235zkSetDigitalPerimeterDetectLPPeriod5zkCTXi zkSetDigitalPerimeterDetectLPPeriod__zkCTX.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1af3e8e23e3a8cdbf5ec95f115fb154915" names="zk__app__utils_8h_1af3e8e23e3a8cdbf5ec95f115fb154915"></target>int <desc_name xml:space="preserve">zkSetDigitalPerimeterDetectLPPeriod</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>lp_period</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Set the low power period (model &gt;= HSM6). </paragraph>
                    <paragraph>This function sets low power period on the digital perimeter detect <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>lp_period</literal>: (input) low power period in microseconds </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkSetDigitalPerimeterDetectLPMaxBits\ (C++\ function)',\ '_CPPv436zkSetDigitalPerimeterDetectLPMaxBits5zkCTXi',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv436zkSetDigitalPerimeterDetectLPMaxBits5zkCTXi _CPPv336zkSetDigitalPerimeterDetectLPMaxBits5zkCTXi _CPPv236zkSetDigitalPerimeterDetectLPMaxBits5zkCTXi zkSetDigitalPerimeterDetectLPMaxBits__zkCTX.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a6e29752c07d3f08810b1ef78162e00d2" names="zk__app__utils_8h_1a6e29752c07d3f08810b1ef78162e00d2"></target>int <desc_name xml:space="preserve">zkSetDigitalPerimeterDetectLPMaxBits</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>max_num_bits</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Set the low power max number of bits (model &gt;= HSM6). </paragraph>
                    <paragraph>This function sets low power max number of bits on the digital perimeter detect <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>max_num_bits</literal>: (input) max number of bits </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkSetDigitalPerimeterDetectDelays\ (C++\ function)',\ '_CPPv433zkSetDigitalPerimeterDetectDelays5zkCTXii',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv433zkSetDigitalPerimeterDetectDelays5zkCTXii _CPPv333zkSetDigitalPerimeterDetectDelays5zkCTXii _CPPv233zkSetDigitalPerimeterDetectDelays5zkCTXii zkSetDigitalPerimeterDetectDelays__zkCTX.i.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a32d0c0a1960f271c4c37b173fd6f6fde" names="zk__app__utils_8h_1a32d0c0a1960f271c4c37b173fd6f6fde"></target>int <desc_name xml:space="preserve">zkSetDigitalPerimeterDetectDelays</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>min_delay_ns</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>max_delay_ns</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Set the delays (model &gt;= HSM6). </paragraph>
                    <paragraph>This function sets delays on the digital perimeter detect <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>min_delay_ns</literal>: (input) minimum delay in nanoseconds </paragraph></list_item><list_item><paragraph><literal>max_delay_ns</literal>: (input) maximum delay in nanoseconds </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkWaitForPerimeterEvent\ (C++\ function)',\ '_CPPv423zkWaitForPerimeterEvent5zkCTX8uint32_t',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv423zkWaitForPerimeterEvent5zkCTX8uint32_t _CPPv323zkWaitForPerimeterEvent5zkCTX8uint32_t _CPPv223zkWaitForPerimeterEvent5zkCTX8uint32_t zkWaitForPerimeterEvent__zkCTX.uint32_t" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a8ee9b92164a922565327aae70ea12578" names="zk__app__utils_8h_1a8ee9b92164a922565327aae70ea12578"></target>int <desc_name xml:space="preserve">zkWaitForPerimeterEvent</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint32_t <emphasis>timeout_ms</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Wait for a perimeter breach event to be detected. </paragraph>
                    <paragraph>This function is called in order to wait for a perimeter breach event to occur. This function blocks the calling thread unless called with a timeout of zero. Note that, in order to receive perimeter events, the zymkey must have been configured to notify the host on either or both of the perimeter detect channels via a call to “zkSetPerimeterEventAction”. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure, -ETIMEDOUT when no perimeter events detected within the specified timeout </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>timeout_ms</literal>: (input) The maximum amount of time in milliseconds to wait for a perimeter event to arrive. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetPerimeterDetectInfo\ (C++\ function)',\ '_CPPv424zkGetPerimeterDetectInfo5zkCTXPP8uint32_tPi',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv424zkGetPerimeterDetectInfo5zkCTXPP8uint32_tPi _CPPv324zkGetPerimeterDetectInfo5zkCTXPP8uint32_tPi _CPPv224zkGetPerimeterDetectInfo5zkCTXPP8uint32_tPi zkGetPerimeterDetectInfo__zkCTX.uint32_tPP.iP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1ac21dfdb0c57067772fe45c6481551029" names="zk__app__utils_8h_1ac21dfdb0c57067772fe45c6481551029"></target>int <desc_name xml:space="preserve">zkGetPerimeterDetectInfo</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint32_t **<emphasis>timestamps_sec</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int *<emphasis>num_timestamps</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get current perimeter detect info. </paragraph>
                    <paragraph>This function gets the timestamp of the first perimeter detect event for the given channel <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>timestamps_sec</literal>: (output) The timestamps for when any breach occurred. The index in this array corresponds to the channel number used by zkSetPerimeterEventAction. A 0 value means no breach has occurred on this channel. This array is allocated by this routine and so it must be freed by the caller. </paragraph></list_item><list_item><paragraph><literal>num_timestamps</literal>: (output) The number of timestamps in the returned array </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkClearPerimeterDetectEvents\ (C++\ function)',\ '_CPPv428zkClearPerimeterDetectEvents5zkCTX',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv428zkClearPerimeterDetectEvents5zkCTX _CPPv328zkClearPerimeterDetectEvents5zkCTX _CPPv228zkClearPerimeterDetectEvents5zkCTX zkClearPerimeterDetectEvents__zkCTX" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1aaba47000d3349d6278c4e0389f3be92d" names="zk__app__utils_8h_1aaba47000d3349d6278c4e0389f3be92d"></target>int <desc_name xml:space="preserve">zkClearPerimeterDetectEvents</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Clear perimeter detect events. </paragraph>
                    <paragraph>This function clears all perimeter detect event info and rearms all perimeter detect channels <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">LED Control</rubric>
            <index entries="['single',\ 'zkLEDOff\ (C++\ function)',\ '_CPPv48zkLEDOff5zkCTX',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv48zkLEDOff5zkCTX _CPPv38zkLEDOff5zkCTX _CPPv28zkLEDOff5zkCTX zkLEDOff__zkCTX" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a0a8056c9a978f68358a6c30e32a0554a" names="zk__app__utils_8h_1a0a8056c9a978f68358a6c30e32a0554a"></target>int <desc_name xml:space="preserve">zkLEDOff</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Turns the LED off. </paragraph>
                    <paragraph><definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkLEDOn\ (C++\ function)',\ '_CPPv47zkLEDOn5zkCTX',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv47zkLEDOn5zkCTX _CPPv37zkLEDOn5zkCTX _CPPv27zkLEDOn5zkCTX zkLEDOn__zkCTX" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a95b9136c02dd481c3c5da5835e47dc4c" names="zk__app__utils_8h_1a95b9136c02dd481c3c5da5835e47dc4c"></target>int <desc_name xml:space="preserve">zkLEDOn</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Turns the LED on. </paragraph>
                    <paragraph><definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkLEDFlash\ (C++\ function)',\ '_CPPv410zkLEDFlash5zkCTX8uint32_t8uint32_t8uint32_t',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv410zkLEDFlash5zkCTX8uint32_t8uint32_t8uint32_t _CPPv310zkLEDFlash5zkCTX8uint32_t8uint32_t8uint32_t _CPPv210zkLEDFlash5zkCTX8uint32_t8uint32_t8uint32_t zkLEDFlash__zkCTX.uint32_t.uint32_t.uint32_t" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a83ef549eec6c821909be6a542995ebca" names="zk__app__utils_8h_1a83ef549eec6c821909be6a542995ebca"></target>int <desc_name xml:space="preserve">zkLEDFlash</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint32_t <emphasis>on_ms</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint32_t <emphasis>off_ms</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint32_t <emphasis>num_flashes</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Flashes the LED. </paragraph>
                    <paragraph><definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>on_ms</literal>: (input) The amount of time, in milliseconds, that the LED will stay on during a flash cycle. </paragraph></list_item><list_item><paragraph><literal>off_ms</literal>: (input) The amount of time, in milliseconds, that the LED will stay off during a flash cycle. </paragraph></list_item><list_item><paragraph><literal>num_flashes</literal>: (input) The number of on/off flash cycles to complete. If this parameter is 0, then the LED will flash indefinitely. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Administrative Ops</rubric>
            <index entries="['single',\ 'zkSetI2CAddr\ (C++\ function)',\ '_CPPv412zkSetI2CAddr5zkCTXi',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv412zkSetI2CAddr5zkCTXi _CPPv312zkSetI2CAddr5zkCTXi _CPPv212zkSetI2CAddr5zkCTXi zkSetI2CAddr__zkCTX.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a17a243ae1bf977c5357aae425c0613a9" names="zk__app__utils_8h_1a17a243ae1bf977c5357aae425c0613a9"></target>int <desc_name xml:space="preserve">zkSetI2CAddr</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>addr</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Sets the i2c address of the Zymkey (i2c versions only) </paragraph>
                    <paragraph>This method should be called if the i2c address of the Zymkey is shared with another i2c device on the same i2c bus. The default i2c address for Zymkey units is 0x30. Currently, the address may be set in the ranges of 0x30 - 0x37 and 0x60 - 0x67. After successful completion of this command, the Zymkey will reset itself. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>addr</literal>: (input) The i2c address that the Zymkey will set itself to. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Time</rubric>
            <index entries="['single',\ 'zkGetTime\ (C++\ function)',\ '_CPPv49zkGetTime5zkCTXP8uint32_tb',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv49zkGetTime5zkCTXP8uint32_tb _CPPv39zkGetTime5zkCTXP8uint32_tb _CPPv29zkGetTime5zkCTXP8uint32_tb zkGetTime__zkCTX.uint32_tP.b" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a4bcc349ef785502a3e5eabdc33629181" names="zk__app__utils_8h_1a4bcc349ef785502a3e5eabdc33629181"></target>int <desc_name xml:space="preserve">zkGetTime</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint32_t *<emphasis>epoch_time_sec</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool <emphasis>precise_time</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get current GMT time. </paragraph>
                    <paragraph>This function is called to get the time directly from a Zymkey’s Real Time Clock (RTC) <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>epoch_time_sec</literal>: (output) The time in seconds from the epoch (Jan. 1, 1970). </paragraph></list_item><list_item><paragraph><literal>precise_time</literal>: (input) If true, this API returns the time after the next second falls. This means that the caller could be blocked up to one second. If false, the API returns immediately with the current time reading. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Accelerometer</rubric>
            <index entries="['single',\ 'zkSetTapSensitivity\ (C++\ function)',\ '_CPPv419zkSetTapSensitivity5zkCTXif',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv419zkSetTapSensitivity5zkCTXif _CPPv319zkSetTapSensitivity5zkCTXif _CPPv219zkSetTapSensitivity5zkCTXif zkSetTapSensitivity__zkCTX.i.float" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a4f378947ae177504717b050ee892c48f" names="zk__app__utils_8h_1a4f378947ae177504717b050ee892c48f"></target>int <desc_name xml:space="preserve">zkSetTapSensitivity</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>axis</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">float <emphasis>pct</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Sets the sensitivity of tap operations. </paragraph>
                    <paragraph>This method permits setting the sensitivity of the tap detection feature. Each axis may be individually configured or all at once. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>axis</literal>: (input) The axis to configure. This parameter should contain one of the values in the enum typedef ACCEL_AXIS_TYPE. </paragraph></list_item><list_item><paragraph><literal>pct</literal>: (input) The sensitivity expressed as percentage.<enumerated_list enumtype="loweralpha" prefix="" suffix="."><list_item><paragraph>0% = Shut down: Tap detection should not occur along the axis.</paragraph></list_item><list_item><paragraph>100% = Maximum sensitivity. </paragraph></list_item></enumerated_list></paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkWaitForTap\ (C++\ function)',\ '_CPPv412zkWaitForTap5zkCTX8uint32_t',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv412zkWaitForTap5zkCTX8uint32_t _CPPv312zkWaitForTap5zkCTX8uint32_t _CPPv212zkWaitForTap5zkCTX8uint32_t zkWaitForTap__zkCTX.uint32_t" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a59be1e5f44001cfe4dbaac2a77bbab4c" names="zk__app__utils_8h_1a59be1e5f44001cfe4dbaac2a77bbab4c"></target>int <desc_name xml:space="preserve">zkWaitForTap</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">uint32_t <emphasis>timeout_ms</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Wait for a tap event to be detected. </paragraph>
                    <paragraph>This function is called in order to wait for a tap event to occur. This function blocks the calling thread unless called with a timeout of zero. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure, -ETIMEDOUT when no tap events detected within the specified timeout </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>timeout_ms</literal>: (input) The maximum amount of time in milliseconds to wait for a tap event to arrive. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetAccelerometerData\ (C++\ function)',\ '_CPPv422zkGetAccelerometerData5zkCTXP19zkAccelAxisDataTypeP19zkAccelAxisDataTypeP19zkAccelAxisDataType',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv422zkGetAccelerometerData5zkCTXP19zkAccelAxisDataTypeP19zkAccelAxisDataTypeP19zkAccelAxisDataType _CPPv322zkGetAccelerometerData5zkCTXP19zkAccelAxisDataTypeP19zkAccelAxisDataTypeP19zkAccelAxisDataType _CPPv222zkGetAccelerometerData5zkCTXP19zkAccelAxisDataTypeP19zkAccelAxisDataTypeP19zkAccelAxisDataType zkGetAccelerometerData__zkCTX.zkAccelAxisDataTypeP.zkAccelAxisDataTypeP.zkAccelAxisDataTypeP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1aafb16259abbab1dc1a65c0efa54d5a42" names="zk__app__utils_8h_1aafb16259abbab1dc1a65c0efa54d5a42"></target>int <desc_name xml:space="preserve">zkGetAccelerometerData</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkAccelAxisDataType" refuri="_api/structzk_accel_axis_data_type#_CPPv419zkAccelAxisDataType">zkAccelAxisDataType</reference> *<emphasis>x</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkAccelAxisDataType" refuri="_api/structzk_accel_axis_data_type#_CPPv419zkAccelAxisDataType">zkAccelAxisDataType</reference> *<emphasis>y</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkAccelAxisDataType" refuri="_api/structzk_accel_axis_data_type#_CPPv419zkAccelAxisDataType">zkAccelAxisDataType</reference> *<emphasis>z</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get current accelerometer data and tap info. </paragraph>
                    <paragraph>This function gets the most recent accelerometer data in units of g forces plus the tap direction per axis. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>x</literal>: (output) x axis accelerometer information y (output) y axis accelerometer information z (output) z axis accelerometer information </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Binding Management</rubric>
            <index entries="['single',\ 'zkLockBinding\ (C++\ function)',\ '_CPPv413zkLockBinding5zkCTX',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv413zkLockBinding5zkCTX _CPPv313zkLockBinding5zkCTX _CPPv213zkLockBinding5zkCTX zkLockBinding__zkCTX" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a34dcd3e4579174085cc753e7148bc3e7" names="zk__app__utils_8h_1a34dcd3e4579174085cc753e7148bc3e7"></target>int <desc_name xml:space="preserve">zkLockBinding</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Set soft binding lock. </paragraph>
                    <paragraph>This function locks the binding for a specific HSM. This API is only valid for HSM series products. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetCurrentBindingInfo\ (C++\ function)',\ '_CPPv423zkGetCurrentBindingInfo5zkCTXPbPb',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv423zkGetCurrentBindingInfo5zkCTXPbPb _CPPv323zkGetCurrentBindingInfo5zkCTXPbPb _CPPv223zkGetCurrentBindingInfo5zkCTXPbPb zkGetCurrentBindingInfo__zkCTX.bP.bP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a9c1ac0054642eb48f4d9b604e1fb0ab5" names="zk__app__utils_8h_1a9c1ac0054642eb48f4d9b604e1fb0ab5"></target>int <desc_name xml:space="preserve">zkGetCurrentBindingInfo</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool *<emphasis>binding_is_locked</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">bool *<emphasis>is_bound</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get current binding info. </paragraph>
                    <paragraph>This function gets the current binding lock state as well as the current binding state. This API is only valid for devices in the HSM family. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>binding_is_locked</literal>: (output) Binary value which expresses the current binding lock state. is_bound (output) Binary value which expresses the current bind state. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Module Info</rubric>
            <index entries="['single',\ 'zkGetModelNumberString\ (C++\ function)',\ '_CPPv422zkGetModelNumberString5zkCTXPPc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv422zkGetModelNumberString5zkCTXPPc _CPPv322zkGetModelNumberString5zkCTXPPc _CPPv222zkGetModelNumberString5zkCTXPPc zkGetModelNumberString__zkCTX.cPP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a96ef2502bb9c17c1884cd8e5a481ec55" names="zk__app__utils_8h_1a96ef2502bb9c17c1884cd8e5a481ec55"></target>int <desc_name xml:space="preserve">zkGetModelNumberString</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">char **<emphasis>model_str</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get Zymkey model number. </paragraph>
                    <paragraph>This function retrieves the model number of the zymkey referred to in a specified context <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context which was created with zkOpen </paragraph></list_item><list_item><paragraph><literal>model_str</literal>: (output) A double pointer to the model string. This function allocates this string. It is the caller’s responsibility to free it. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetFirmwareVersionString\ (C++\ function)',\ '_CPPv426zkGetFirmwareVersionString5zkCTXPPc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv426zkGetFirmwareVersionString5zkCTXPPc _CPPv326zkGetFirmwareVersionString5zkCTXPPc _CPPv226zkGetFirmwareVersionString5zkCTXPPc zkGetFirmwareVersionString__zkCTX.cPP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a277fddb2c0abff8b8b2e532b46481fe5" names="zk__app__utils_8h_1a277fddb2c0abff8b8b2e532b46481fe5"></target>int <desc_name xml:space="preserve">zkGetFirmwareVersionString</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">char **<emphasis>fw_ver_str</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get Zymkey firmware version. </paragraph>
                    <paragraph>This function retrieves the firmware version number of the zymkey referred to in a specified context <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context which was created with zkOpen </paragraph></list_item><list_item><paragraph><literal>version_str</literal>: (output) A double pointer to the firmware version string. This function allocates this string. It is the caller’s responsibility to free it. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetSerialNumberString\ (C++\ function)',\ '_CPPv423zkGetSerialNumberString5zkCTXPPc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv423zkGetSerialNumberString5zkCTXPPc _CPPv323zkGetSerialNumberString5zkCTXPPc _CPPv223zkGetSerialNumberString5zkCTXPPc zkGetSerialNumberString__zkCTX.cPP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a2de34f6c567cf67e908d6aafce53b323" names="zk__app__utils_8h_1a2de34f6c567cf67e908d6aafce53b323"></target>int <desc_name xml:space="preserve">zkGetSerialNumberString</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">char **<emphasis>serial_num_str</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get Zymkey serial number. </paragraph>
                    <paragraph>This function retrieves the serial number of the zymkey referred to in a specified context <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context which was created with zkOpen </paragraph></list_item><list_item><paragraph><literal>serial_num_str</literal>: (output) A double pointer to the serial number string. This function allocates this string. It is the caller’s responsibility to free it. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetCPUTemp\ (C++\ function)',\ '_CPPv412zkGetCPUTemp5zkCTXPf',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv412zkGetCPUTemp5zkCTXPf _CPPv312zkGetCPUTemp5zkCTXPf _CPPv212zkGetCPUTemp5zkCTXPf zkGetCPUTemp__zkCTX.floatP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a2e463f92b62c58b0ffb3d036998de8cd" names="zk__app__utils_8h_1a2e463f92b62c58b0ffb3d036998de8cd"></target>int <desc_name xml:space="preserve">zkGetCPUTemp</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">float *<emphasis>cpu_temp</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get current HSM CPU temperature. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function gets the current HSM CPU temp. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>cpu_temp</literal>: (output) The temperature in celsius of the CPU. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetRTCDrift\ (C++\ function)',\ '_CPPv413zkGetRTCDrift5zkCTXPf',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv413zkGetRTCDrift5zkCTXPf _CPPv313zkGetRTCDrift5zkCTXPf _CPPv213zkGetRTCDrift5zkCTXPf zkGetRTCDrift__zkCTX.floatP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a4fb1581bda04b621f56af043173159f7" names="zk__app__utils_8h_1a4fb1581bda04b621f56af043173159f7"></target>int <desc_name xml:space="preserve">zkGetRTCDrift</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">float *<emphasis>rtc_drift</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get current RTC drift. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function is called to get the current RTC drift. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>rtc_drift</literal>: (output) The RTC drift. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkGetBatteryVoltage\ (C++\ function)',\ '_CPPv419zkGetBatteryVoltage5zkCTXPf',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv419zkGetBatteryVoltage5zkCTXPf _CPPv319zkGetBatteryVoltage5zkCTXPf _CPPv219zkGetBatteryVoltage5zkCTXPf zkGetBatteryVoltage__zkCTX.floatP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a9c2d7b0c22146f89ba04ccc7df38052b" names="zk__app__utils_8h_1a9c2d7b0c22146f89ba04ccc7df38052b"></target>int <desc_name xml:space="preserve">zkGetBatteryVoltage</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">float *<emphasis>batt_voltage</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Get the battery voltage (model &gt;= HSM6). </paragraph>
                    <paragraph>This function gets the current battery voltage <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 if successful, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>ctx</literal>: (input) Zymkey context. </paragraph></list_item><list_item><paragraph><literal>battV</literal>: (output) The current battery voltage value </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">Battery Voltage Monitor</rubric>
            <index entries="['single',\ 'zkSetBatteryVoltageAction\ (C++\ function)',\ '_CPPv425zkSetBatteryVoltageAction5zkCTXi',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv425zkSetBatteryVoltageAction5zkCTXi _CPPv325zkSetBatteryVoltageAction5zkCTXi _CPPv225zkSetBatteryVoltageAction5zkCTXi zkSetBatteryVoltageAction__zkCTX.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a004db48c634667dab0d53c745aa36266" names="zk__app__utils_8h_1a004db48c634667dab0d53c745aa36266"></target>int <desc_name xml:space="preserve">zkSetBatteryVoltageAction</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>action</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Set battery voltage threshold action. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function specifies the action to take when the battery voltage falls below the threshold set by zkSetBatteryVoltageThreshold. If this function is never called, do nothing is default. There are three actions:<bullet_list><list_item><paragraph>Do nothing</paragraph></list_item><list_item><paragraph>Go to sleep until battery is replaced</paragraph></list_item><list_item><paragraph>Self-destruct <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>action</literal>: (input) The action to apply, specify one of the ZK_THRESHOLD_ACTION_TYPE:<bullet_list><list_item><paragraph>Do nothing (ZK_ACTION_NONE)</paragraph></list_item><list_item><paragraph>Sleep (ZK_ACTION_SLEEP)</paragraph></list_item><list_item><paragraph>Self-destruct (ZK_ACTION_SELF_DESTRUCT) </paragraph></list_item></bullet_list></paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph></list_item></bullet_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkSetBatteryVoltageThreshold\ (C++\ function)',\ '_CPPv428zkSetBatteryVoltageThreshold5zkCTXf',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv428zkSetBatteryVoltageThreshold5zkCTXf _CPPv328zkSetBatteryVoltageThreshold5zkCTXf _CPPv228zkSetBatteryVoltageThreshold5zkCTXf zkSetBatteryVoltageThreshold__zkCTX.float" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a85d7e20bba98c94d2bd92b1f8dfc68c9" names="zk__app__utils_8h_1a85d7e20bba98c94d2bd92b1f8dfc68c9"></target>int <desc_name xml:space="preserve">zkSetBatteryVoltageThreshold</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">float <emphasis>threshold</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Sets the battery voltage threshold. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function sets the threshold at which if the battery voltage falls bellow, the action set by zkSetBatteryVoltageAction will be carried out. The recommended threshold is 2.3V. If this function isn’t called 2.3V is assumed by default. Threshold must be below 2.5V. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>threshold</literal>: (input) The threshold in Volts. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="user-defined">
            <rubric classes="breathe-sectiondef-title">CPU Temperature Monitor</rubric>
            <index entries="['single',\ 'zkSetCPUTempAction\ (C++\ function)',\ '_CPPv418zkSetCPUTempAction5zkCTXi',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv418zkSetCPUTempAction5zkCTXi _CPPv318zkSetCPUTempAction5zkCTXi _CPPv218zkSetCPUTempAction5zkCTXi zkSetCPUTempAction__zkCTX.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a9e7e23bdb88149047344b1522f62a627" names="zk__app__utils_8h_1a9e7e23bdb88149047344b1522f62a627"></target>int <desc_name xml:space="preserve">zkSetCPUTempAction</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>action</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Set HSM CPU temperature threshold action. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function specifies the action to take when the HSM CPU temperature falls below the threshold set by zkSetCPULowTempThreshold, or rises above the threshold set by zkSetCPUHighTempThreshold. There are two actions to apply:<bullet_list><list_item><paragraph>Do nothing</paragraph></list_item><list_item><paragraph>Self-destruct <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>action</literal>: (input) The action to apply, used it’s named constant from ZK_THRESHOLD_ACTION_TYPE:<bullet_list><list_item><paragraph>Do nothing (ZK_ACTION_NONE)</paragraph></list_item><list_item><paragraph>Self-destruct (ZK_ACTION_SELF_DESTRUCT) </paragraph></list_item></bullet_list></paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph></list_item></bullet_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkSetCPULowTempThreshold\ (C++\ function)',\ '_CPPv424zkSetCPULowTempThreshold5zkCTXf',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv424zkSetCPULowTempThreshold5zkCTXf _CPPv324zkSetCPULowTempThreshold5zkCTXf _CPPv224zkSetCPULowTempThreshold5zkCTXf zkSetCPULowTempThreshold__zkCTX.float" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a0bf795c9bed846f2d87855816e70c114" names="zk__app__utils_8h_1a0bf795c9bed846f2d87855816e70c114"></target>int <desc_name xml:space="preserve">zkSetCPULowTempThreshold</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">float <emphasis>threshold</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Sets the HSM CPU low temperature threshold. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function sets the threshold at which if the on-board HSM CPU’s tempreature falls below, the action set by zkSetCPUTempAction will be carried out. WARNING: You can lock yourself out in dev mode if you set a threshold above the CPU’s ambient temperature. The recommended setting is no more than 20C. If no threshold is set, -10 degrees celsius is set as default. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>threshold</literal>: (input) The threshold in celsius. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkSetCPUHighTempThreshold\ (C++\ function)',\ '_CPPv425zkSetCPUHighTempThreshold5zkCTXf',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv425zkSetCPUHighTempThreshold5zkCTXf _CPPv325zkSetCPUHighTempThreshold5zkCTXf _CPPv225zkSetCPUHighTempThreshold5zkCTXf zkSetCPUHighTempThreshold__zkCTX.float" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a26fab5ddba18b8d79feebcebe8583e1a" names="zk__app__utils_8h_1a26fab5ddba18b8d79feebcebe8583e1a"></target>int <desc_name xml:space="preserve">zkSetCPUHighTempThreshold</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">float <emphasis>threshold</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Sets the HSM CPU high temperature threshold. (model &gt;= HSM6) </paragraph>
                    <paragraph>This function sets the threshold at which if the on-board HSM CPU’s tempreature rises above, the action set by zkSetCPUTempAction will be carried out. WARNING: You can lock yourself out in dev mode if you set a threshold below the CPU’s ambient temperature. The recommended setting is no less than 40C. If no threshold is set, 65 degrees celsius is set as default. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>threshold</literal>: (input) The threshold in celsius. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkSetVerifiedBootPolicy\ (C++\ function)',\ '_CPPv423zkSetVerifiedBootPolicy5zkCTXi',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv423zkSetVerifiedBootPolicy5zkCTXi _CPPv323zkSetVerifiedBootPolicy5zkCTXi _CPPv223zkSetVerifiedBootPolicy5zkCTXi zkSetVerifiedBootPolicy__zkCTX.i" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1a09a0b1c715cec08478601ae213368a51" names="zk__app__utils_8h_1a09a0b1c715cec08478601ae213368a51"></target>int <desc_name xml:space="preserve">zkSetVerifiedBootPolicy</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>policy_id</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Sets the verified boot policy. (model &gt;= SCM) </paragraph>
                    <paragraph>This function specifies the action to take when verified boot event triggers based on a file change. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>policy_id</literal>: (input) The actions to apply to the verified boot process:<bullet_list><list_item><paragraph>0 Do Nothing (ZK_SUPBOOT_FAIL_NO_ACTION)</paragraph></list_item><list_item><paragraph>1 Self-Destruct (ZK_SUPBOOT_FAIL_DESTROY)</paragraph></list_item><list_item><paragraph>2 Hold Chip in Reset (ZK_SUPBOOT_FAIL_HOLD_RESET) </paragraph></list_item></bullet_list></paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkAddOrUpdateVerifiedBootFile\ (C++\ function)',\ '_CPPv429zkAddOrUpdateVerifiedBootFile5zkCTXiPKc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv429zkAddOrUpdateVerifiedBootFile5zkCTXiPKc _CPPv329zkAddOrUpdateVerifiedBootFile5zkCTXiPKc _CPPv229zkAddOrUpdateVerifiedBootFile5zkCTXiPKc zkAddOrUpdateVerifiedBootFile__zkCTX.i.cCP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1ad5519226320364b07fb7ff85c4a45bc7" names="zk__app__utils_8h_1ad5519226320364b07fb7ff85c4a45bc7"></target>int <desc_name xml:space="preserve">zkAddOrUpdateVerifiedBootFile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve">int <emphasis>slot</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>file_path</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Update file manifest for verified boot to check. (model &gt;= SCM) </paragraph>
                    <paragraph>This function adds or updates files to be checked by verified boot. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>slot</literal>: (input) The slot to sign the file with. </paragraph></list_item><list_item><paragraph><literal>file_path</literal>: (input) The file to be signed and checked by verified boot. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkRemoveVerifiedBootFile\ (C++\ function)',\ '_CPPv424zkRemoveVerifiedBootFile5zkCTXPKc',\ '',\ None]"></index>
            <desc classes="cpp" desctype="function" domain="cpp" noindex="False" objtype="function">
                <desc_signature ids="_CPPv424zkRemoveVerifiedBootFile5zkCTXPKc _CPPv324zkRemoveVerifiedBootFile5zkCTXPKc _CPPv224zkRemoveVerifiedBootFile5zkCTXPKc zkRemoveVerifiedBootFile__zkCTX.cCP" is_multiline="True"><desc_signature_line add_permalink="True" xml:space="preserve"><target ids="zk__app__utils_8h_1ad987949223e7a092f0857af55caf4b8b" names="zk__app__utils_8h_1ad987949223e7a092f0857af55caf4b8b"></target>int <desc_name xml:space="preserve">zkRemoveVerifiedBootFile</desc_name><desc_parameterlist xml:space="preserve"><desc_parameter noemph="True" xml:space="preserve"><reference internal="True" reftitle="zkCTX" refuri="_api/typedef_zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692#_CPPv45zkCTX">zkCTX</reference> <emphasis>ctx</emphasis></desc_parameter><desc_parameter noemph="True" xml:space="preserve"><desc_annotation xml:space="preserve">const</desc_annotation> char *<emphasis>file_path</emphasis></desc_parameter></desc_parameterlist></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Remove a file from file manifest for verified boot to check. (model &gt;= SCM) </paragraph>
                    <paragraph>This function removes a file to be checked by verified boot. <definition_list><definition_list_item><term><strong>Return</strong></term><definition><paragraph>0 for success, less than 0 for failure. </paragraph></definition></definition_list_item><definition_list_item><term><strong>Parameters</strong></term><definition><bullet_list classes="breatheparameterlist"><list_item><paragraph><literal>file_path</literal>: (input) The file to be removed from the verified boot manifest. </paragraph></list_item></bullet_list></definition></definition_list_item></definition_list></paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="define">
            <rubric classes="breathe-sectiondef-title">Defines</rubric>
            <index entries="['single',\ 'ZK_PERIMETER_EVENT_ACTION_NOTIFY\ (C\ macro)',\ 'c.ZK_PERIMETER_EVENT_ACTION_NOTIFY',\ '',\ None]"></index>
            <desc classes="cpp" desctype="macro" domain="cpp" noindex="False" objtype="macro">
                <desc_signature ids="c.ZK_PERIMETER_EVENT_ACTION_NOTIFY" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1a483ab601bc65411778a8573de194ca28" names="zk__app__utils_8h_1a483ab601bc65411778a8573de194ca28"></target><desc_name xml:space="preserve">ZK_PERIMETER_EVENT_ACTION_NOTIFY</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Perimeter breach action flag definitions. </paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'ZK_PERIMETER_EVENT_ACTION_SELF_DESTRUCT\ (C\ macro)',\ 'c.ZK_PERIMETER_EVENT_ACTION_SELF_DESTRUCT',\ '',\ None]"></index>
            <desc classes="cpp" desctype="macro" domain="cpp" noindex="False" objtype="macro">
                <desc_signature ids="c.ZK_PERIMETER_EVENT_ACTION_SELF_DESTRUCT" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1aeb46102a3b07a7dbc1938c2e64a3bc56" names="zk__app__utils_8h_1aeb46102a3b07a7dbc1938c2e64a3bc56"></target><desc_name xml:space="preserve">ZK_PERIMETER_EVENT_ACTION_SELF_DESTRUCT</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="typedef">
            <rubric classes="breathe-sectiondef-title">Typedefs</rubric>
            <index entries="['single',\ 'zkCTX\ (C++\ type)',\ '_CPPv45zkCTX',\ '',\ None]"></index>
            <desc classes="cpp" desctype="type" domain="cpp" noindex="False" objtype="type">
                <desc_signature ids="_CPPv45zkCTX _CPPv35zkCTX _CPPv25zkCTX zkCTX" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692" names="zk__app__utils_8h_1ad9cb7324974b6700baaa38bb1e0dd692"></target><desc_annotation xml:space="preserve">typedef </desc_annotation>void *<desc_name xml:space="preserve">zkCTX</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                </desc_content>
            </desc>
            <index entries="['single',\ 'ZK_EC_KEY_TYPE\ (C++\ type)',\ '_CPPv414ZK_EC_KEY_TYPE',\ '',\ None]"></index>
            <desc classes="cpp" desctype="type" domain="cpp" noindex="False" objtype="type">
                <desc_signature is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1adc6fcaf09ce1ebf1bc28e7cd9d11154c" names="zk__app__utils_8h_1adc6fcaf09ce1ebf1bc28e7cd9d11154c"></target><desc_annotation xml:space="preserve">typedef </desc_annotation><desc_annotation xml:space="preserve">enum</desc_annotation> <reference internal="True" reftitle="ZK_EC_KEY_TYPE" refuri="_api/enum_zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7#_CPPv414ZK_EC_KEY_TYPE">ZK_EC_KEY_TYPE</reference> <desc_name xml:space="preserve">ZK_EC_KEY_TYPE</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Supported key types. </paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'ZK_RECOVERY_STRATEGY\ (C++\ type)',\ '_CPPv420ZK_RECOVERY_STRATEGY',\ '',\ None]"></index>
            <desc classes="cpp" desctype="type" domain="cpp" noindex="False" objtype="type">
                <desc_signature is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1a9ad878b5a824b0a58005025d60f078b5" names="zk__app__utils_8h_1a9ad878b5a824b0a58005025d60f078b5"></target><desc_annotation xml:space="preserve">typedef </desc_annotation><desc_annotation xml:space="preserve">enum</desc_annotation> <reference internal="True" reftitle="ZK_RECOVERY_STRATEGY" refuri="_api/enum_zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37#_CPPv420ZK_RECOVERY_STRATEGY">ZK_RECOVERY_STRATEGY</reference> <desc_name xml:space="preserve">ZK_RECOVERY_STRATEGY</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Supported recovery strategies. </paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'ZK_ECDH_KDF_TYPE\ (C++\ type)',\ '_CPPv416ZK_ECDH_KDF_TYPE',\ '',\ None]"></index>
            <desc classes="cpp" desctype="type" domain="cpp" noindex="False" objtype="type">
                <desc_signature is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1a373f0a7fd3cdb75ff3944219af363d6d" names="zk__app__utils_8h_1a373f0a7fd3cdb75ff3944219af363d6d"></target><desc_annotation xml:space="preserve">typedef </desc_annotation><desc_annotation xml:space="preserve">enum</desc_annotation> <reference internal="True" reftitle="ZK_ECDH_KDF_TYPE" refuri="_api/enum_zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919e#_CPPv416ZK_ECDH_KDF_TYPE">ZK_ECDH_KDF_TYPE</reference> <desc_name xml:space="preserve">ZK_ECDH_KDF_TYPE</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Supported ECDH key derivation function types. </paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'ZK_ACCEL_AXIS_TYPE\ (C++\ type)',\ '_CPPv418ZK_ACCEL_AXIS_TYPE',\ '',\ None]"></index>
            <desc classes="cpp" desctype="type" domain="cpp" noindex="False" objtype="type">
                <desc_signature is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1a71457a7f4cc58c17b1502bda69978bc2" names="zk__app__utils_8h_1a71457a7f4cc58c17b1502bda69978bc2"></target><desc_annotation xml:space="preserve">typedef </desc_annotation><desc_annotation xml:space="preserve">enum</desc_annotation> <reference internal="True" reftitle="ZK_ACCEL_AXIS_TYPE" refuri="_api/enum_zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61#_CPPv418ZK_ACCEL_AXIS_TYPE">ZK_ACCEL_AXIS_TYPE</reference> <desc_name xml:space="preserve">ZK_ACCEL_AXIS_TYPE</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Accelerometer axis enum, used to set tap sensitivity. </paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'ZK_THRESHOLD_ACTION_TYPE\ (C++\ type)',\ '_CPPv424ZK_THRESHOLD_ACTION_TYPE',\ '',\ None]"></index>
            <desc classes="cpp" desctype="type" domain="cpp" noindex="False" objtype="type">
                <desc_signature is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1a523cd900e7fbeb25cb9557790c28a9be" names="zk__app__utils_8h_1a523cd900e7fbeb25cb9557790c28a9be"></target><desc_annotation xml:space="preserve">typedef </desc_annotation><desc_annotation xml:space="preserve">enum</desc_annotation> <reference internal="True" reftitle="ZK_THRESHOLD_ACTION_TYPE" refuri="_api/enum_zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5#_CPPv424ZK_THRESHOLD_ACTION_TYPE">ZK_THRESHOLD_ACTION_TYPE</reference> <desc_name xml:space="preserve">ZK_THRESHOLD_ACTION_TYPE</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Possible actions for threshold monitor functions. </paragraph>
                </desc_content>
            </desc>
            <index entries="['single',\ 'zkAccelAxisDataType\ (C++\ type)',\ '_CPPv419zkAccelAxisDataType',\ '',\ None]"></index>
            <desc classes="cpp" desctype="type" domain="cpp" noindex="False" objtype="type">
                <desc_signature ids="_CPPv419zkAccelAxisDataType _CPPv319zkAccelAxisDataType _CPPv219zkAccelAxisDataType zkAccelAxisDataType" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1a45d7e3232790f86c9282b91cb0a292af" names="zk__app__utils_8h_1a45d7e3232790f86c9282b91cb0a292af"></target><desc_annotation xml:space="preserve">typedef </desc_annotation><desc_annotation xml:space="preserve">struct</desc_annotation> <reference internal="True" reftitle="zkAccelAxisDataType" refuri="_api/structzk_accel_axis_data_type#_CPPv419zkAccelAxisDataType">zkAccelAxisDataType</reference> <desc_name xml:space="preserve">zkAccelAxisDataType</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>zkGetAccelerometer data output. </paragraph>
                </desc_content>
            </desc>
        </container>
        <container classes="breathe-sectiondef" objtype="enum">
            <rubric classes="breathe-sectiondef-title">Enums</rubric>
            <index entries="['single',\ 'ZK_EC_KEY_TYPE\ (C++\ enum)',\ '_CPPv414ZK_EC_KEY_TYPE',\ '',\ None]"></index>
            <desc classes="cpp" desctype="enum" domain="cpp" noindex="False" objtype="enum">
                <desc_signature ids="_CPPv414ZK_EC_KEY_TYPE _CPPv314ZK_EC_KEY_TYPE _CPPv214ZK_EC_KEY_TYPE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7" names="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7"></target><desc_annotation xml:space="preserve">enum </desc_annotation><desc_name xml:space="preserve">ZK_EC_KEY_TYPE</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Supported key types. </paragraph>
                    <paragraph><emphasis>Values:</emphasis></paragraph>
                    <index entries="['single',\ 'ZK_EC_KEY_TYPE::ZK_NISTP256\ (C++\ enumerator)',\ '_CPPv4N14ZK_EC_KEY_TYPE11ZK_NISTP256E',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N14ZK_EC_KEY_TYPE11ZK_NISTP256E _CPPv3N14ZK_EC_KEY_TYPE11ZK_NISTP256E _CPPv2N14ZK_EC_KEY_TYPE11ZK_NISTP256E" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7a4b1eb00eb760cf6137262448dd924f66" names="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7a4b1eb00eb760cf6137262448dd924f66"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_NISTP256</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_EC_KEY_TYPE::ZK_SECP256R1\ (C++\ enumerator)',\ '_CPPv4N14ZK_EC_KEY_TYPE12ZK_SECP256R1E',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N14ZK_EC_KEY_TYPE12ZK_SECP256R1E _CPPv3N14ZK_EC_KEY_TYPE12ZK_SECP256R1E _CPPv2N14ZK_EC_KEY_TYPE12ZK_SECP256R1E" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7a5bfe43be8b3a4df1be2416e607b99bf4" names="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7a5bfe43be8b3a4df1be2416e607b99bf4"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_SECP256R1</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_EC_KEY_TYPE::ZK_SECP256K1\ (C++\ enumerator)',\ '_CPPv4N14ZK_EC_KEY_TYPE12ZK_SECP256K1E',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N14ZK_EC_KEY_TYPE12ZK_SECP256K1E _CPPv3N14ZK_EC_KEY_TYPE12ZK_SECP256K1E _CPPv2N14ZK_EC_KEY_TYPE12ZK_SECP256K1E" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7ae9bdfaebeae5590ee19daa5757d216d6" names="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7ae9bdfaebeae5590ee19daa5757d216d6"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_SECP256K1</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_EC_KEY_TYPE::ZK_ED25519\ (C++\ enumerator)',\ '_CPPv4N14ZK_EC_KEY_TYPE10ZK_ED25519E',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N14ZK_EC_KEY_TYPE10ZK_ED25519E _CPPv3N14ZK_EC_KEY_TYPE10ZK_ED25519E _CPPv2N14ZK_EC_KEY_TYPE10ZK_ED25519E" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7a50189ff9b487f7ee252b388cd94b8dfe" names="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7a50189ff9b487f7ee252b388cd94b8dfe"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_ED25519</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_EC_KEY_TYPE::ZK_X25519\ (C++\ enumerator)',\ '_CPPv4N14ZK_EC_KEY_TYPE9ZK_X25519E',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N14ZK_EC_KEY_TYPE9ZK_X25519E _CPPv3N14ZK_EC_KEY_TYPE9ZK_X25519E _CPPv2N14ZK_EC_KEY_TYPE9ZK_X25519E" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7aceece18a02ba729b3228e80612ba5071" names="zk__app__utils_8h_1ad1e233079d658083389bcda3e66bffa7aceece18a02ba729b3228e80612ba5071"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_X25519</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ 'ZK_RECOVERY_STRATEGY\ (C++\ enum)',\ '_CPPv420ZK_RECOVERY_STRATEGY',\ '',\ None]"></index>
            <desc classes="cpp" desctype="enum" domain="cpp" noindex="False" objtype="enum">
                <desc_signature ids="_CPPv420ZK_RECOVERY_STRATEGY _CPPv320ZK_RECOVERY_STRATEGY _CPPv220ZK_RECOVERY_STRATEGY" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37" names="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37"></target><desc_annotation xml:space="preserve">enum </desc_annotation><desc_name xml:space="preserve">ZK_RECOVERY_STRATEGY</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Supported recovery strategies. </paragraph>
                    <paragraph><emphasis>Values:</emphasis></paragraph>
                    <index entries="['single',\ 'ZK_RECOVERY_STRATEGY::ZK_NONE\ (C++\ enumerator)',\ '_CPPv4N20ZK_RECOVERY_STRATEGY7ZK_NONEE',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N20ZK_RECOVERY_STRATEGY7ZK_NONEE _CPPv3N20ZK_RECOVERY_STRATEGY7ZK_NONEE _CPPv2N20ZK_RECOVERY_STRATEGY7ZK_NONEE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37a9a5cb3541dbc9c3e8ec1ab533692a2df" names="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37a9a5cb3541dbc9c3e8ec1ab533692a2df"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_NONE</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_RECOVERY_STRATEGY::ZK_BIP39\ (C++\ enumerator)',\ '_CPPv4N20ZK_RECOVERY_STRATEGY8ZK_BIP39E',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N20ZK_RECOVERY_STRATEGY8ZK_BIP39E _CPPv3N20ZK_RECOVERY_STRATEGY8ZK_BIP39E _CPPv2N20ZK_RECOVERY_STRATEGY8ZK_BIP39E" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37abe88645b7c251045104741f9d1bee746" names="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37abe88645b7c251045104741f9d1bee746"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_BIP39</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_RECOVERY_STRATEGY::ZK_SLIP39\ (C++\ enumerator)',\ '_CPPv4N20ZK_RECOVERY_STRATEGY9ZK_SLIP39E',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N20ZK_RECOVERY_STRATEGY9ZK_SLIP39E _CPPv3N20ZK_RECOVERY_STRATEGY9ZK_SLIP39E _CPPv2N20ZK_RECOVERY_STRATEGY9ZK_SLIP39E" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37a93fb347979912444469b25b790daa789" names="zk__app__utils_8h_1ad4b157af1d69d413c1965cef0c0d9f37a93fb347979912444469b25b790daa789"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_SLIP39</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ 'ZK_ECDH_KDF_TYPE\ (C++\ enum)',\ '_CPPv416ZK_ECDH_KDF_TYPE',\ '',\ None]"></index>
            <desc classes="cpp" desctype="enum" domain="cpp" noindex="False" objtype="enum">
                <desc_signature ids="_CPPv416ZK_ECDH_KDF_TYPE _CPPv316ZK_ECDH_KDF_TYPE _CPPv216ZK_ECDH_KDF_TYPE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919e" names="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919e"></target><desc_annotation xml:space="preserve">enum </desc_annotation><desc_name xml:space="preserve">ZK_ECDH_KDF_TYPE</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Supported ECDH key derivation function types. </paragraph>
                    <paragraph><emphasis>Values:</emphasis></paragraph>
                    <index entries="['single',\ 'ZK_ECDH_KDF_TYPE::ZK_KDF_RFC5869_SHA256\ (C++\ enumerator)',\ '_CPPv4N16ZK_ECDH_KDF_TYPE21ZK_KDF_RFC5869_SHA256E',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N16ZK_ECDH_KDF_TYPE21ZK_KDF_RFC5869_SHA256E _CPPv3N16ZK_ECDH_KDF_TYPE21ZK_KDF_RFC5869_SHA256E _CPPv2N16ZK_ECDH_KDF_TYPE21ZK_KDF_RFC5869_SHA256E" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea5c03f868fbfae1cabab5b843f5fce3db" names="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea5c03f868fbfae1cabab5b843f5fce3db"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_KDF_RFC5869_SHA256</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_ECDH_KDF_TYPE::ZK_KDF_RFC5869_SHA512\ (C++\ enumerator)',\ '_CPPv4N16ZK_ECDH_KDF_TYPE21ZK_KDF_RFC5869_SHA512E',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N16ZK_ECDH_KDF_TYPE21ZK_KDF_RFC5869_SHA512E _CPPv3N16ZK_ECDH_KDF_TYPE21ZK_KDF_RFC5869_SHA512E _CPPv2N16ZK_ECDH_KDF_TYPE21ZK_KDF_RFC5869_SHA512E" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea7eef6f090fa056c47366d3c887c72d80" names="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea7eef6f090fa056c47366d3c887c72d80"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_KDF_RFC5869_SHA512</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_ECDH_KDF_TYPE::ZK_KDF_PBKDF2_SHA256\ (C++\ enumerator)',\ '_CPPv4N16ZK_ECDH_KDF_TYPE20ZK_KDF_PBKDF2_SHA256E',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N16ZK_ECDH_KDF_TYPE20ZK_KDF_PBKDF2_SHA256E _CPPv3N16ZK_ECDH_KDF_TYPE20ZK_KDF_PBKDF2_SHA256E _CPPv2N16ZK_ECDH_KDF_TYPE20ZK_KDF_PBKDF2_SHA256E" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea6218c948cfbd3276da30a47eac4c483f" names="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea6218c948cfbd3276da30a47eac4c483f"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_KDF_PBKDF2_SHA256</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_ECDH_KDF_TYPE::ZK_KDF_PBKDF2_SHA512\ (C++\ enumerator)',\ '_CPPv4N16ZK_ECDH_KDF_TYPE20ZK_KDF_PBKDF2_SHA512E',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N16ZK_ECDH_KDF_TYPE20ZK_KDF_PBKDF2_SHA512E _CPPv3N16ZK_ECDH_KDF_TYPE20ZK_KDF_PBKDF2_SHA512E _CPPv2N16ZK_ECDH_KDF_TYPE20ZK_KDF_PBKDF2_SHA512E" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea0e80147f1a0b2f3256b6dd23809885d2" names="zk__app__utils_8h_1abee5b47d3dde7bd528de628f5330919ea0e80147f1a0b2f3256b6dd23809885d2"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_KDF_PBKDF2_SHA512</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ 'ZK_ACCEL_AXIS_TYPE\ (C++\ enum)',\ '_CPPv418ZK_ACCEL_AXIS_TYPE',\ '',\ None]"></index>
            <desc classes="cpp" desctype="enum" domain="cpp" noindex="False" objtype="enum">
                <desc_signature ids="_CPPv418ZK_ACCEL_AXIS_TYPE _CPPv318ZK_ACCEL_AXIS_TYPE _CPPv218ZK_ACCEL_AXIS_TYPE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61" names="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61"></target><desc_annotation xml:space="preserve">enum </desc_annotation><desc_name xml:space="preserve">ZK_ACCEL_AXIS_TYPE</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Accelerometer axis enum, used to set tap sensitivity. </paragraph>
                    <paragraph><emphasis>Values:</emphasis></paragraph>
                    <index entries="['single',\ 'ZK_ACCEL_AXIS_TYPE::ZK_ACCEL_AXIS_X\ (C++\ enumerator)',\ '_CPPv4N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_XE',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_XE _CPPv3N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_XE _CPPv2N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_XE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61a059eeb9df0335701c7049e9cb75ed0da" names="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61a059eeb9df0335701c7049e9cb75ed0da"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_ACCEL_AXIS_X</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_ACCEL_AXIS_TYPE::ZK_ACCEL_AXIS_Y\ (C++\ enumerator)',\ '_CPPv4N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_YE',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_YE _CPPv3N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_YE _CPPv2N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_YE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61adb91693f4203922414d4c8190667c999" names="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61adb91693f4203922414d4c8190667c999"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_ACCEL_AXIS_Y</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_ACCEL_AXIS_TYPE::ZK_ACCEL_AXIS_Z\ (C++\ enumerator)',\ '_CPPv4N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_ZE',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_ZE _CPPv3N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_ZE _CPPv2N18ZK_ACCEL_AXIS_TYPE15ZK_ACCEL_AXIS_ZE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61a25d262bab2dfd6ce743e06d49cc5b617" names="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61a25d262bab2dfd6ce743e06d49cc5b617"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_ACCEL_AXIS_Z</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_ACCEL_AXIS_TYPE::ZK_ACCEL_AXIS_ALL\ (C++\ enumerator)',\ '_CPPv4N18ZK_ACCEL_AXIS_TYPE17ZK_ACCEL_AXIS_ALLE',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N18ZK_ACCEL_AXIS_TYPE17ZK_ACCEL_AXIS_ALLE _CPPv3N18ZK_ACCEL_AXIS_TYPE17ZK_ACCEL_AXIS_ALLE _CPPv2N18ZK_ACCEL_AXIS_TYPE17ZK_ACCEL_AXIS_ALLE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61a467e1c997db20ac4d04c81cd1ab92b0d" names="zk__app__utils_8h_1aedbdda1d06346a4a4c7b8b0a3ad70f61a467e1c997db20ac4d04c81cd1ab92b0d"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_ACCEL_AXIS_ALL</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
            <index entries="['single',\ 'ZK_THRESHOLD_ACTION_TYPE\ (C++\ enum)',\ '_CPPv424ZK_THRESHOLD_ACTION_TYPE',\ '',\ None]"></index>
            <desc classes="cpp" desctype="enum" domain="cpp" noindex="False" objtype="enum">
                <desc_signature ids="_CPPv424ZK_THRESHOLD_ACTION_TYPE _CPPv324ZK_THRESHOLD_ACTION_TYPE _CPPv224ZK_THRESHOLD_ACTION_TYPE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5" names="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5"></target><desc_annotation xml:space="preserve">enum </desc_annotation><desc_name xml:space="preserve">ZK_THRESHOLD_ACTION_TYPE</desc_name></desc_signature_line></desc_signature>
                <desc_content>
                    <paragraph>Possible actions for threshold monitor functions. </paragraph>
                    <paragraph><emphasis>Values:</emphasis></paragraph>
                    <index entries="['single',\ 'ZK_THRESHOLD_ACTION_TYPE::ZK_ACTION_NONE\ (C++\ enumerator)',\ '_CPPv4N24ZK_THRESHOLD_ACTION_TYPE14ZK_ACTION_NONEE',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N24ZK_THRESHOLD_ACTION_TYPE14ZK_ACTION_NONEE _CPPv3N24ZK_THRESHOLD_ACTION_TYPE14ZK_ACTION_NONEE _CPPv2N24ZK_THRESHOLD_ACTION_TYPE14ZK_ACTION_NONEE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5adbd51f81cd5f9e013a0024ec505ce737" names="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5adbd51f81cd5f9e013a0024ec505ce737"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_ACTION_NONE</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_THRESHOLD_ACTION_TYPE::ZK_ACTION_SELF_DESTRUCT\ (C++\ enumerator)',\ '_CPPv4N24ZK_THRESHOLD_ACTION_TYPE23ZK_ACTION_SELF_DESTRUCTE',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N24ZK_THRESHOLD_ACTION_TYPE23ZK_ACTION_SELF_DESTRUCTE _CPPv3N24ZK_THRESHOLD_ACTION_TYPE23ZK_ACTION_SELF_DESTRUCTE _CPPv2N24ZK_THRESHOLD_ACTION_TYPE23ZK_ACTION_SELF_DESTRUCTE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5a56e327600bf958958912d1788ce84842" names="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5a56e327600bf958958912d1788ce84842"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_ACTION_SELF_DESTRUCT</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'ZK_THRESHOLD_ACTION_TYPE::ZK_ACTION_SLEEP\ (C++\ enumerator)',\ '_CPPv4N24ZK_THRESHOLD_ACTION_TYPE15ZK_ACTION_SLEEPE',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="enumerator" domain="cpp" noindex="False" objtype="enumerator">
                        <desc_signature ids="_CPPv4N24ZK_THRESHOLD_ACTION_TYPE15ZK_ACTION_SLEEPE _CPPv3N24ZK_THRESHOLD_ACTION_TYPE15ZK_ACTION_SLEEPE _CPPv2N24ZK_THRESHOLD_ACTION_TYPE15ZK_ACTION_SLEEPE" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5a5079d5b11b4d84929cf5fa7861f42326" names="zk__app__utils_8h_1a33917af8836db67d44da0de5f65c31f5a5079d5b11b4d84929cf5fa7861f42326"></target><desc_annotation xml:space="preserve">enumerator </desc_annotation><desc_name xml:space="preserve">ZK_ACTION_SLEEP</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                        </desc_content>
                    </desc>
                </desc_content>
            </desc>
        </container>
        <index entries="['single',\ 'zkAccelAxisDataType\ (C++\ struct)',\ '_CPPv419zkAccelAxisDataType',\ '',\ None]"></index>
        <desc classes="cpp" desctype="struct" domain="cpp" noindex="False" objtype="struct">
            <desc_signature is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="structzk_accel_axis_data_type" names="structzk_accel_axis_data_type"></target><desc_annotation xml:space="preserve">struct </desc_annotation><desc_name xml:space="preserve">zkAccelAxisDataType</desc_name></desc_signature_line></desc_signature>
            <desc_content>
                <emphasis>#include &lt;zk_app_utils.h&gt;</emphasis>
                <paragraph>zkGetAccelerometer data output. </paragraph>
                <container classes="breathe-sectiondef" objtype="public-attrib">
                    <rubric classes="breathe-sectiondef-title">Public Members</rubric>
                    <index entries="['single',\ 'zkAccelAxisDataType::g\ (C++\ member)',\ '_CPPv4N19zkAccelAxisDataType1gE',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="var" domain="cpp" noindex="False" objtype="var">
                        <desc_signature ids="_CPPv4N19zkAccelAxisDataType1gE _CPPv3N19zkAccelAxisDataType1gE _CPPv2N19zkAccelAxisDataType1gE zkAccelAxisDataType::g__double" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="structzk_accel_axis_data_type_1a0b0263b57b8cfdee66bc8ba88832f30a" names="structzk_accel_axis_data_type_1a0b0263b57b8cfdee66bc8ba88832f30a"></target>double <desc_name xml:space="preserve">g</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                            <paragraph>the axis reading in units of g-force </paragraph>
                        </desc_content>
                    </desc>
                    <index entries="['single',\ 'zkAccelAxisDataType::tapDirection\ (C++\ member)',\ '_CPPv4N19zkAccelAxisDataType12tapDirectionE',\ '',\ None]"></index>
                    <desc classes="cpp" desctype="var" domain="cpp" noindex="False" objtype="var">
                        <desc_signature ids="_CPPv4N19zkAccelAxisDataType12tapDirectionE _CPPv3N19zkAccelAxisDataType12tapDirectionE _CPPv2N19zkAccelAxisDataType12tapDirectionE zkAccelAxisDataType::tapDirection__i" is_multiline="True"><desc_signature_line add_permalink="False" xml:space="preserve"><target ids="structzk_accel_axis_data_type_1af3b1fd34e286b65f39293b9035460966" names="structzk_accel_axis_data_type_1af3b1fd34e286b65f39293b9035460966"></target>int <desc_name xml:space="preserve">tapDirection</desc_name></desc_signature_line></desc_signature>
                        <desc_content>
                            <paragraph>the direction of the force along the axis which caused a tap event: -1 = negative +1 = positive 0 = did not cause a tap event </paragraph>
                        </desc_content>
                    </desc>
                </container>
            </desc_content>
        </desc>
    </section>
</document>
