name: process api docs update

on:
  push:
    branches:
      - "api-docs-update"
  workflow_dispatch:

jobs:
  prepare_hugo_environment:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the branch with updated API docs
        uses: actions/checkout@v2
        with:
          ref: "api-docs-update"
          submodules: true
          fetch-depth: 0

      # - name: Setup Hugo
      #   uses: peaceiris/actions-hugo@v2
      #   with:
      #     hugo-version: "0.79.1"
      #     extended: true

      # - name: Configure caching for npm
      #   uses: c-hive/gha-npm-cache@v1

      # - name: Install npm dependencies
      #   run: npm install

      - name: Hugo-ify the API docs
        id: hugoify
        uses: zymbit-docs/actions-hugoify-api-docs@master

      - name: Commit processed files
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com

          TEST_BRANCH_NAME="api-docs-update-TESTBRANCH-$(date -u +%s)"
          git checkout -b $TEST_BRANCH_NAME

          git add ./content/api/
          git rm -r ./content/GENERATED/

          LAST_COMMIT_MSG=$(git log -1 --grep="^docs" --format="%s" -- content/GENERATED/)
          LAST_HASH=$(expr "$LAST_COMMIT_MSG" : '.* \([0-9a-fA-F]*\)')

          GHA_HUGOIFY_LOG=$(cat .GHA-LOG)
          echo -e "docs: update API docs to latest zkapputils (${LAST_HASH})\n" > .NEW_COMMIT_MSG
          echo -e "${GHA_HUGOIFY_LOG}\n" >> .NEW_COMMIT_MSG
          echo -e "NOTE: THIS COMMIT WAS AUTOMATICALLY GENERATED." >> .NEW_COMMIT_MSG

          git commit --file=.NEW_COMMIT_MSG

          git log -2 --pretty=fuller

          git push origin $TEST_BRANCH_NAME

      # - name: Get updated API doc files
      #   id: get-doc-files
      #   run: |
      #     readarray -t FILE_LIST < <(ls -1A ./content/GENERATED/)

      #     NEW_FILE_LIST=()

      #     for api_file in "${FILE_LIST[@]}"; do
      #       # Determine the location of the new file to generate.
      #       NEW_FILE=${api_file#GENERATED_}
      #       NEW_FILE_LIST+=(${NEW_FILE})

      #       # Remove any old docs with the same name.
      #       rm -f ./content/api/${NEW_FILE}

      #       # Generate the frontmatter for the updated docs.
      #       hugo new api/${NEW_FILE} --kind docs
      #     done

      #     echo "::set-output name=new-files::${NEW_FILE_LIST[@]}"
      # - name: Generate final doc files
      #   run: |
      #     NEW_FILES=(${{ steps.get-doc-files.outputs.new-files }})

      #     for api_file in "${NEW_FILES[@]}"; do
      #       sed '/^# .\+\n\n/d' ./content/GENERATED/GENERATED_${api_file}
      #     done
