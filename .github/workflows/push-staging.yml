name: Push branches to staging environment

on:
  push:
    branches-ignore:
      # We don't want to push to staging when there are changes to the main branch,
      # because that branch will be deployed to the docs site.
      - main

      # Don't trigger on pushes to `gh-pages` branch because that is an already-built static site.
      - gh-pages

      # We don't want to trigger this when there are *pushes* to the `api-docs-update*`
      # branches, as we need to do some pre-processing on these branches.
      - api-docs-update
      - api-docs-update**
    paths-ignore:
      - '.github/**'
  create:
    # See the notes under `on.push.branches-ignore` for the rationale here.
    branches-ignore:
      - main
      - gh-pages
      - api-docs-update
      - api-docs-update**
  delete:
    # See the notes under `on.push.branches-ignore` for the rationale here.
    branches-ignore:
      - main
      - gh-pages
  workflow_dispatch:

  # After the `api-docs-update` branch is processed by the relevant workflow,
  # THEN we should push the result to the staging environment.
  workflow_run:
    workflows: ["Process raw API docs update"]
    branches:
      - api-docs-update
      - api-docs-update**
    types:
      - completed

jobs:
  get-trigger:
    name: Determine how this workflow was triggered
    runs-on: ubuntu-latest
    outputs:
      workflow_trigger: ${{ steps.check-trigger.outputs.workflow_trigger }}
      head_branch: ${{ steps.check-trigger.outputs.head_branch }}
      origin_triggered: ${{ steps.check-trigger.outputs.origin_triggered }}

    steps:
      - name: Check workflow trigger
        id: check-trigger
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: |
          # Check the GITHUB_CONTEXT env variable to determine the workflow trigger.
          TRIGGER_EVENT_NAME=$(echo "$GITHUB_CONTEXT" | jq --raw-output '.event_name')
          echo "::set-output name=workflow_trigger::$TRIGGER_EVENT_NAME"

          HEAD_BRANCH=''

          # If this workflow was triggered by the completion of the API doc processing
          # workflow, determine the branch that had the updates.
          if [[ "${TRIGGER_EVENT_NAME}" == "workflow_run" ]]; then
            HEAD_BRANCH=$(echo "$GITHUB_CONTEXT" | jq --raw-output --compact-output '.event.workflow_run.head_branch')
            echo "::set-output name=origin_triggered::false"

          # If this workflow was triggered by a push to a branch, then we just have to work
          # with the branch that triggered it.
          else
            echo "::set-output name=origin_triggered::true"
          fi
          echo "::set-output name=head_branch::$HEAD_BRANCH"


  check-repo:
    name: Check if already in a staging repo
    runs-on: ubuntu-latest
    outputs:
      is_staging: ${{ steps.check.outputs.is_staging }}

    steps:
      - name: check repo
        id: check
        run: echo "::set-output name=is_staging::${{ contains(github.repository, '-staging') }}"

  mirror-branch:
    name: Mirror the updated branch to staging site
    runs-on: ubuntu-latest
    needs: [check-repo, get-trigger]
    if: ${{ github.event_name != 'delete' && needs.check-repo.outputs.is_staging == 'false' }}
    env:
      WORKFLOW_TRIGGER: ${{ needs.get-trigger.outputs.workflow_trigger }}
      ORIGIN_TRIGGERED: ${{ needs.get-trigger.outputs.origin_triggered }}
      ORIGIN_BRANCH: ${{ needs.get-trigger.outputs.head_branch }}

    steps:
      - name: Load deploy key for staging repo
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        run: |
          mkdir -p ${HOME}/.ssh

          cp /etc/ssh/ssh_config ${HOME}/.ssh/config || true
          echo -e "Host *\n\tStrictHostKeyChecking no" >> ${HOME}/.ssh/config

          echo "${SSH_PRIVATE_KEY}" > ${HOME}/.ssh/id_rsa
          chmod 600 ${HOME}/.ssh/id_rsa

          git config --global user.name github-actions[bot]
          git config --global user.email github-actions[bot]@users.noreply.github.com

      # Checkout repository under $GITHUB_WORKSPACE
      - name: Checkout origin branch
        if: ${{ needs.get-trigger.outputs.origin_triggered == 'true' }}
        uses: actions/checkout@v4
        with:
          submodules: true
          path: branch
          fetch-depth: 0

      - name: Checkout workflow-triggering branch
        if: ${{ needs.get-trigger.outputs.origin_triggered == 'false' }}
        uses: actions/checkout@v4
        with:
          submodules: true
          path: branch
          fetch-depth: 0
          ref: ${{ needs.get-trigger.outputs.head_branch }}

      - name: Prepare commit for staging repo
        env:
          # The URL of the staging repo should be set in the `MIRROR_REPO` environment var.
          MIRROR_REPO: ${{ secrets.MIRROR_REPO }}
        run: |
          if [[ "${ORIGIN_TRIGGERED}" == 'false' ]]; then
            BRANCH_REF="${ORIGIN_BRANCH}"
          else
            BRANCH_REF=${{ github.ref }}
          fi

          # The (main) branch of the mirror repo is checked out to the
          # directory at `./upstream_staging`.
          git clone ${{ secrets.MIRROR_REPO }} upstream-staging

          # Our current branch has already been checked out to the
          # directory at `./branch`.
          cd ${GITHUB_WORKSPACE}/branch

          # Get rid of our current origin and add the mirror repo origin, to
          # prevent us from accidentally pushing to origin.
          git remote add staging "${MIRROR_REPO}"
          git remote remove origin

          # Remove the workflow that are specific to the `docs` repo (so they
          # don't run again when we push to the mirror).
          pip install git-filter-repo
          git filter-repo --force --path ".github" --invert-path

          # Replace the workflows on our current branch with the workflows
          # from the `main` branch of the staging repo. We do want these
          # to run whenever we push the new branch.
          cp -R ${GITHUB_WORKSPACE}/upstream-staging/.github .
          git add .github
          # git commit -m "add `main` branch workflows to branch"
          git commit --amend --no-edit

          git push --force staging ${BRANCH_REF}

  delete-branch:
    name: Delete an obsolete branch from staging site
    runs-on: ubuntu-latest
    needs: check-repo
    env:
      DELETED_BRANCH: ${{ github.event.ref }}
    if: ${{ github.event_name == 'delete' && needs.check-repo.outputs.is_staging == 'false' }}

    steps:
      - name: Load deploy key for staging repo
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        run: |
          mkdir -p ${HOME}/.ssh

          cp /etc/ssh/ssh_config ${HOME}/.ssh/config || true
          echo -e "Host *\n\tStrictHostKeyChecking no" >> ${HOME}/.ssh/config

          echo "${SSH_PRIVATE_KEY}" > ${HOME}/.ssh/id_rsa
          chmod 600 ${HOME}/.ssh/id_rsa

      # Checkout repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v4

      - name: Delete branch from staging repo
        env:
          MIRROR_REPO: ${{ secrets.MIRROR_REPO }}
        run: |
          cd ${GITHUB_WORKSPACE}

          git remote add staging "${MIRROR_REPO}"
          git remote remove origin

          git push --force staging --delete ${DELETED_BRANCH}
