name: push to staging

on:
  push:
    branches-ignore:
      - main
      - gh-pages
      - api-docs-update
    paths-ignore:
      - '.github/**'
  create:
    branches-ignore:
      - main
      - gh-pages
      - api-docs-update
  delete:
    branches-ignore:
      - main
      - gh-pages
  workflow_dispatch:
  workflow_run:
    workflows: ["process api docs update"]
    branches:
      - api-docs-update
    types:
      - completed

jobs:
  # debug_output:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Dump `github` context
  #       env:
  #         GITHUB_CONTEXT: ${{ toJSON(github) }}
  #       run: |
  #         echo "$GITHUB_CONTEXT" | jq 'del(. | .token)'

  get-trigger:
    runs-on: ubuntu-latest
    outputs:
      workflow_trigger: ${{ steps.check-trigger.outputs.workflow_trigger }}
      run_metadata: ${{ steps.check-trigger.outputs.run_metadata }}
      origin_triggered: ${{ steps.check-trigger.outputs.origin_triggered }}

    steps:
      - name: Check workflow trigger
        id: check-trigger
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: |
          TRIGGER_EVENT_NAME=$(echo "$GITHUB_CONTEXT" | jq --raw-output '.event_name')
          echo "::set-output name=workflow_trigger::$TRIGGER_EVENT_NAME"

          RUN_METADATA='{}'
          if [[ "${TRIGGER_EVENT_NAME}" == "workflow_run" ]]; then
            RUN_METADATA=$(echo "$GITHUB_CONTEXT" | jq --raw-output --compact-output '.event.workflow_run | {conclusion, event, head_branch, status, name}')
            echo "::set-output name=origin_triggered::false"
          else
            echo "::set-output name=origin_triggered::true"
          fi
          echo "::set-output name=run_metadata::$RUN_METADATA"


  check-repo:
    runs-on: ubuntu-latest
    outputs:
      is_staging: ${{ steps.check.outputs.is_staging }}

    steps:
      - name: check repo
        id: check
        run: echo "::set-output name=is_staging::${{ contains(github.repository, '-staging') }}"

  mirror-branch:
    runs-on: ubuntu-latest
    needs: [check-repo, get-trigger]
    if: ${{ github.event_name != 'delete' && needs.check-repo.outputs.is_staging == 'false' }}
    env:
      WORKFLOW_TRIGGER: ${{ needs.get-trigger.outputs.workflow_trigger }}
      RUN_METADATA: ${{ needs.get-trigger.outputs.run_metadata }}
      ORIGIN_TRIGGERED: ${{ needs.get-trigger.outputs.origin_triggered }}

    steps:
      - name: load ssh private key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        run: |
          mkdir -p ${HOME}/.ssh

          cp /etc/ssh/ssh_config ${HOME}/.ssh/config || true
          echo -e "Host *\n\tStrictHostKeyChecking no" >> ${HOME}/.ssh/config

          echo "${SSH_PRIVATE_KEY}" > ${HOME}/.ssh/id_rsa
          chmod 600 ${HOME}/.ssh/id_rsa

          git config --global user.name github-actions[bot]
          git config --global user.email github-actions[bot]@users.noreply.github.com

      # Checkout repository under $GITHUB_WORKSPACE
      - name: Checkout origin branch
        if: ${{ needs.get-trigger.outputs.origin_triggered == 'true' }}
        uses: actions/checkout@v2
        with:
          submodules: true
          path: branch
          fetch-depth: 0

      - name: Checkout workflow-triggering branch
        if: ${{ needs.get-trigger.outputs.origin_triggered == 'false' }}
        uses: actions/checkout@v2
        with:
          submodules: true
          path: branch
          fetch-depth: 0
          ref: ${{ toJSON(needs.get-trigger.outputs.run_metadata).head_branch }}

      - name: configure mirror
        env:
          MIRROR_REPO: ${{ secrets.MIRROR_REPO }}
        run: |
          git clone ${{ secrets.MIRROR_REPO }} upstream-staging

          cd ${GITHUB_WORKSPACE}/branch

          git remote add staging "${MIRROR_REPO}"
          git remote remove origin

          wget https://raw.githubusercontent.com/newren/git-filter-repo/main/git-filter-repo
          chmod +x git-filter-repo
          ./git-filter-repo --force --path ".github" --invert-paths

          cp -R ${GITHUB_WORKSPACE}/upstream-staging/.github .
          git add .github
          git commit -m "add upstream workflows to branch"

          git push --force staging ${{ github.ref }}

  delete-branch:
    runs-on: ubuntu-latest
    needs: check-repo
    env:
      DELETED_BRANCH: ${{ github.event.ref }}
    if: ${{ github.event_name == 'delete' && needs.check-repo.outputs.is_staging == 'false' }}

    steps:
      - name: load ssh private key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        run: |
          mkdir -p ${HOME}/.ssh

          cp /etc/ssh/ssh_config ${HOME}/.ssh/config || true
          echo -e "Host *\n\tStrictHostKeyChecking no" >> ${HOME}/.ssh/config

          echo "${SSH_PRIVATE_KEY}" > ${HOME}/.ssh/id_rsa
          chmod 600 ${HOME}/.ssh/id_rsa

      # Checkout repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v2

      - name: delete mirrored branch
        env:
          MIRROR_REPO: ${{ secrets.MIRROR_REPO }}
        run: |
          cd ${GITHUB_WORKSPACE}

          git remote add staging "${MIRROR_REPO}"
          git remote remove origin

          git push --force staging --delete ${DELETED_BRANCH}
